// THIS FILE HAS BEEN AUTO-GENERATED BY THE 'DEAR BINDINGS' GENERATOR.
// **DO NOT EDIT DIRECTLY**
// https://github.com/dearimgui/dear_bindings

#include "imgui.h"
#include "imgui_internal.h"

#include <stdio.h>

// Wrap this in a namespace to keep it separate from the C++ API
namespace cimgui
{
#include "zimgui.h"
}

// Manual helpers
// These implement functionality that isn't in the original C++ API, but is useful to callers from other languages

CIMGUI_API void cimgui::ImVector_Construct(void* vector)
{
    // All ImVector classes are the same size, so it doesn't matter which we use for sizeof() here
    memset(vector, 0, sizeof(::ImVector<int>));
}

CIMGUI_API void cimgui::ImVector_Destruct(void* vector)
{
    // As with ImVector_construct(), it doesn't matter what the type parameter is here as we just want to get the
    // pointer and free it (without calling destructors or anything similar)
    ::ImVector<int>* real_vector = reinterpret_cast<::ImVector<int>*>(vector);
    if (real_vector->Data)
    {
        IM_FREE(real_vector->Data);
    }
}

#if defined(IMGUI_HAS_IMSTR)
#if IMGUI_HAS_IMSTR

// User-facing helper to convert char* to ImStr
CIMGUI_API cimgui::ImStr cimgui::ImStr_FromCharStr(const char* b)
{
    ImStr str;
    str.Begin = b;
    str.End = b ? b + strlen(b) : NULL;
    return str;
}

// Internal helper to convert char* directly to C++-style ImStr
static inline ::ImStr MarshalToCPP_ImStr_FromCharStr(const char* b)
{
    ::ImStr str;
    str.Begin = b;
    str.End = b ? b + strlen(b) : NULL;
    return str;
}
#endif // IMGUI_HAS_IMSTR
#endif // defined(IMGUI_HAS_IMSTR)
// By-value struct conversions

static inline cimgui::ImVec2 ConvertFromCPP_ImVec2(const ::ImVec2& src)
{
    cimgui::ImVec2 dest;
    dest.x = src.x;
    dest.y = src.y;
    return dest;
}

static inline ::ImVec2 ConvertToCPP_ImVec2(const cimgui::ImVec2& src)
{
    ::ImVec2 dest;
    dest.x = src.x;
    dest.y = src.y;
    return dest;
}

static inline cimgui::ImVec4 ConvertFromCPP_ImVec4(const ::ImVec4& src)
{
    cimgui::ImVec4 dest;
    dest.x = src.x;
    dest.y = src.y;
    dest.z = src.z;
    dest.w = src.w;
    return dest;
}

static inline ::ImVec4 ConvertToCPP_ImVec4(const cimgui::ImVec4& src)
{
    ::ImVec4 dest;
    dest.x = src.x;
    dest.y = src.y;
    dest.z = src.z;
    dest.w = src.w;
    return dest;
}

static inline cimgui::ImColor ConvertFromCPP_ImColor(const ::ImColor& src)
{
    cimgui::ImColor dest;
    dest.Value.x = src.Value.x;
    dest.Value.y = src.Value.y;
    dest.Value.z = src.Value.z;
    dest.Value.w = src.Value.w;
    return dest;
}

static inline ::ImColor ConvertToCPP_ImColor(const cimgui::ImColor& src)
{
    ::ImColor dest;
    dest.Value.x = src.Value.x;
    dest.Value.y = src.Value.y;
    dest.Value.z = src.Value.z;
    dest.Value.w = src.Value.w;
    return dest;
}

// Function stubs

#ifndef IMGUI_DISABLE

CIMGUI_API cimgui::ImGuiContext* cimgui::CreateContext(cimgui::ImFontAtlas* shared_font_atlas)
{
    return reinterpret_cast<::cimgui::ImGuiContext*>(::ImGui::CreateContext(reinterpret_cast<::ImFontAtlas*>(shared_font_atlas)));
}

CIMGUI_API void          cimgui::DestroyContext(cimgui::ImGuiContext* ctx)
{
    ::ImGui::DestroyContext(reinterpret_cast<::ImGuiContext*>(ctx));
}

CIMGUI_API cimgui::ImGuiContext* cimgui::GetCurrentContext(void)
{
    return reinterpret_cast<::cimgui::ImGuiContext*>(::ImGui::GetCurrentContext());
}

CIMGUI_API void          cimgui::SetCurrentContext(cimgui::ImGuiContext* ctx)
{
    ::ImGui::SetCurrentContext(reinterpret_cast<::ImGuiContext*>(ctx));
}

CIMGUI_API cimgui::ImGuiIO* cimgui::GetIO(void)
{
    return reinterpret_cast<::cimgui::ImGuiIO*>(&::ImGui::GetIO());
}

CIMGUI_API cimgui::ImGuiPlatformIO* cimgui::GetPlatformIO(void)
{
    return reinterpret_cast<::cimgui::ImGuiPlatformIO*>(&::ImGui::GetPlatformIO());
}

CIMGUI_API cimgui::ImGuiStyle* cimgui::GetStyle(void)
{
    return reinterpret_cast<::cimgui::ImGuiStyle*>(&::ImGui::GetStyle());
}

CIMGUI_API void             cimgui::NewFrame(void)
{
    ::ImGui::NewFrame();
}

CIMGUI_API void             cimgui::EndFrame(void)
{
    ::ImGui::EndFrame();
}

CIMGUI_API void             cimgui::Render(void)
{
    ::ImGui::Render();
}

CIMGUI_API cimgui::ImDrawData* cimgui::GetDrawData(void)
{
    return reinterpret_cast<::cimgui::ImDrawData*>(::ImGui::GetDrawData());
}

CIMGUI_API void        cimgui::ShowDemoWindow(bool* p_open)
{
    ::ImGui::ShowDemoWindow(p_open);
}

CIMGUI_API void        cimgui::ShowMetricsWindow(bool* p_open)
{
    ::ImGui::ShowMetricsWindow(p_open);
}

CIMGUI_API void        cimgui::ShowDebugLogWindow(bool* p_open)
{
    ::ImGui::ShowDebugLogWindow(p_open);
}

CIMGUI_API void        cimgui::ShowIDStackToolWindow(void)
{
    ::ImGui::ShowIDStackToolWindow();
}

CIMGUI_API void        cimgui::ShowIDStackToolWindowEx(bool* p_open)
{
    ::ImGui::ShowIDStackToolWindow(p_open);
}

CIMGUI_API void        cimgui::ShowAboutWindow(bool* p_open)
{
    ::ImGui::ShowAboutWindow(p_open);
}

CIMGUI_API void        cimgui::ShowStyleEditor(cimgui::ImGuiStyle* ref)
{
    ::ImGui::ShowStyleEditor(reinterpret_cast<::ImGuiStyle*>(ref));
}

CIMGUI_API bool        cimgui::ShowStyleSelector(const char* label)
{
    return ::ImGui::ShowStyleSelector(label);
}

CIMGUI_API void        cimgui::ShowFontSelector(const char* label)
{
    ::ImGui::ShowFontSelector(label);
}

CIMGUI_API void        cimgui::ShowUserGuide(void)
{
    ::ImGui::ShowUserGuide();
}

CIMGUI_API const char* cimgui::GetVersion(void)
{
    return ::ImGui::GetVersion();
}

CIMGUI_API void cimgui::StyleColorsDark(cimgui::ImGuiStyle* dst)
{
    ::ImGui::StyleColorsDark(reinterpret_cast<::ImGuiStyle*>(dst));
}

CIMGUI_API void cimgui::StyleColorsLight(cimgui::ImGuiStyle* dst)
{
    ::ImGui::StyleColorsLight(reinterpret_cast<::ImGuiStyle*>(dst));
}

CIMGUI_API void cimgui::StyleColorsClassic(cimgui::ImGuiStyle* dst)
{
    ::ImGui::StyleColorsClassic(reinterpret_cast<::ImGuiStyle*>(dst));
}

CIMGUI_API bool cimgui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    return ::ImGui::Begin(name, p_open, flags);
}

CIMGUI_API void cimgui::End(void)
{
    ::ImGui::End();
}

CIMGUI_API bool cimgui::BeginChild(const char* str_id, cimgui::ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
{
    return ::ImGui::BeginChild(str_id, ConvertToCPP_ImVec2(size), child_flags, window_flags);
}

CIMGUI_API bool cimgui::BeginChildID(ImGuiID id, cimgui::ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
{
    return ::ImGui::BeginChild(id, ConvertToCPP_ImVec2(size), child_flags, window_flags);
}

CIMGUI_API void cimgui::EndChild(void)
{
    ::ImGui::EndChild();
}

CIMGUI_API bool        cimgui::IsWindowAppearing(void)
{
    return ::ImGui::IsWindowAppearing();
}

CIMGUI_API bool        cimgui::IsWindowCollapsed(void)
{
    return ::ImGui::IsWindowCollapsed();
}

CIMGUI_API bool        cimgui::IsWindowFocused(ImGuiFocusedFlags flags)
{
    return ::ImGui::IsWindowFocused(flags);
}

CIMGUI_API bool        cimgui::IsWindowHovered(ImGuiHoveredFlags flags)
{
    return ::ImGui::IsWindowHovered(flags);
}

CIMGUI_API cimgui::ImDrawList* cimgui::GetWindowDrawList(void)
{
    return reinterpret_cast<::cimgui::ImDrawList*>(::ImGui::GetWindowDrawList());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetWindowPos(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetWindowPos());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetWindowSize(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetWindowSize());
}

CIMGUI_API float       cimgui::GetWindowWidth(void)
{
    return ::ImGui::GetWindowWidth();
}

CIMGUI_API float       cimgui::GetWindowHeight(void)
{
    return ::ImGui::GetWindowHeight();
}

CIMGUI_API void cimgui::SetNextWindowPos(cimgui::ImVec2 pos, ImGuiCond cond)
{
    ::ImGui::SetNextWindowPos(ConvertToCPP_ImVec2(pos), cond);
}

CIMGUI_API void cimgui::SetNextWindowPosEx(cimgui::ImVec2 pos, ImGuiCond cond, cimgui::ImVec2 pivot)
{
    ::ImGui::SetNextWindowPos(ConvertToCPP_ImVec2(pos), cond, ConvertToCPP_ImVec2(pivot));
}

CIMGUI_API void cimgui::SetNextWindowSize(cimgui::ImVec2 size, ImGuiCond cond)
{
    ::ImGui::SetNextWindowSize(ConvertToCPP_ImVec2(size), cond);
}

CIMGUI_API void cimgui::SetNextWindowSizeConstraints(cimgui::ImVec2 size_min, cimgui::ImVec2 size_max, cimgui::ImGuiSizeCallback custom_callback, void* custom_callback_data)
{
    ::ImGui::SetNextWindowSizeConstraints(ConvertToCPP_ImVec2(size_min), ConvertToCPP_ImVec2(size_max), reinterpret_cast<::ImGuiSizeCallback>(custom_callback), custom_callback_data);
}

CIMGUI_API void cimgui::SetNextWindowContentSize(cimgui::ImVec2 size)
{
    ::ImGui::SetNextWindowContentSize(ConvertToCPP_ImVec2(size));
}

CIMGUI_API void cimgui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    ::ImGui::SetNextWindowCollapsed(collapsed, cond);
}

CIMGUI_API void cimgui::SetNextWindowFocus(void)
{
    ::ImGui::SetNextWindowFocus();
}

CIMGUI_API void cimgui::SetNextWindowScroll(cimgui::ImVec2 scroll)
{
    ::ImGui::SetNextWindowScroll(ConvertToCPP_ImVec2(scroll));
}

CIMGUI_API void cimgui::SetNextWindowBgAlpha(float alpha)
{
    ::ImGui::SetNextWindowBgAlpha(alpha);
}

CIMGUI_API void cimgui::SetWindowPos(cimgui::ImVec2 pos, ImGuiCond cond)
{
    ::ImGui::SetWindowPos(ConvertToCPP_ImVec2(pos), cond);
}

CIMGUI_API void cimgui::SetWindowSize(cimgui::ImVec2 size, ImGuiCond cond)
{
    ::ImGui::SetWindowSize(ConvertToCPP_ImVec2(size), cond);
}

CIMGUI_API void cimgui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    ::ImGui::SetWindowCollapsed(collapsed, cond);
}

CIMGUI_API void cimgui::SetWindowFocus(void)
{
    ::ImGui::SetWindowFocus();
}

CIMGUI_API void cimgui::SetWindowFontScale(float scale)
{
    ::ImGui::SetWindowFontScale(scale);
}

CIMGUI_API void cimgui::SetWindowPosStr(const char* name, cimgui::ImVec2 pos, ImGuiCond cond)
{
    ::ImGui::SetWindowPos(name, ConvertToCPP_ImVec2(pos), cond);
}

CIMGUI_API void cimgui::SetWindowSizeStr(const char* name, cimgui::ImVec2 size, ImGuiCond cond)
{
    ::ImGui::SetWindowSize(name, ConvertToCPP_ImVec2(size), cond);
}

CIMGUI_API void cimgui::SetWindowCollapsedStr(const char* name, bool collapsed, ImGuiCond cond)
{
    ::ImGui::SetWindowCollapsed(name, collapsed, cond);
}

CIMGUI_API void cimgui::SetWindowFocusStr(const char* name)
{
    ::ImGui::SetWindowFocus(name);
}

CIMGUI_API float cimgui::GetScrollX(void)
{
    return ::ImGui::GetScrollX();
}

CIMGUI_API float cimgui::GetScrollY(void)
{
    return ::ImGui::GetScrollY();
}

CIMGUI_API void  cimgui::SetScrollX(float scroll_x)
{
    ::ImGui::SetScrollX(scroll_x);
}

CIMGUI_API void  cimgui::SetScrollY(float scroll_y)
{
    ::ImGui::SetScrollY(scroll_y);
}

CIMGUI_API float cimgui::GetScrollMaxX(void)
{
    return ::ImGui::GetScrollMaxX();
}

CIMGUI_API float cimgui::GetScrollMaxY(void)
{
    return ::ImGui::GetScrollMaxY();
}

CIMGUI_API void  cimgui::SetScrollHereX(float center_x_ratio)
{
    ::ImGui::SetScrollHereX(center_x_ratio);
}

CIMGUI_API void  cimgui::SetScrollHereY(float center_y_ratio)
{
    ::ImGui::SetScrollHereY(center_y_ratio);
}

CIMGUI_API void  cimgui::SetScrollFromPosX(float local_x, float center_x_ratio)
{
    ::ImGui::SetScrollFromPosX(local_x, center_x_ratio);
}

CIMGUI_API void  cimgui::SetScrollFromPosY(float local_y, float center_y_ratio)
{
    ::ImGui::SetScrollFromPosY(local_y, center_y_ratio);
}

CIMGUI_API void cimgui::PushFont(cimgui::ImFont* font)
{
    ::ImGui::PushFont(reinterpret_cast<::ImFont*>(font));
}

CIMGUI_API void cimgui::PopFont(void)
{
    ::ImGui::PopFont();
}

CIMGUI_API void cimgui::PushStyleColor(ImGuiCol idx, ImU32 col)
{
    ::ImGui::PushStyleColor(idx, col);
}

CIMGUI_API void cimgui::PushStyleColorImVec4(ImGuiCol idx, cimgui::ImVec4 col)
{
    ::ImGui::PushStyleColor(idx, ConvertToCPP_ImVec4(col));
}

CIMGUI_API void cimgui::PopStyleColor(void)
{
    ::ImGui::PopStyleColor();
}

CIMGUI_API void cimgui::PopStyleColorEx(int count)
{
    ::ImGui::PopStyleColor(count);
}

CIMGUI_API void cimgui::PushStyleVar(ImGuiStyleVar idx, float val)
{
    ::ImGui::PushStyleVar(idx, val);
}

CIMGUI_API void cimgui::PushStyleVarImVec2(ImGuiStyleVar idx, cimgui::ImVec2 val)
{
    ::ImGui::PushStyleVar(idx, ConvertToCPP_ImVec2(val));
}

CIMGUI_API void cimgui::PushStyleVarX(ImGuiStyleVar idx, float val_x)
{
    ::ImGui::PushStyleVarX(idx, val_x);
}

CIMGUI_API void cimgui::PushStyleVarY(ImGuiStyleVar idx, float val_y)
{
    ::ImGui::PushStyleVarY(idx, val_y);
}

CIMGUI_API void cimgui::PopStyleVar(void)
{
    ::ImGui::PopStyleVar();
}

CIMGUI_API void cimgui::PopStyleVarEx(int count)
{
    ::ImGui::PopStyleVar(count);
}

CIMGUI_API void cimgui::PushItemFlag(ImGuiItemFlags option, bool enabled)
{
    ::ImGui::PushItemFlag(option, enabled);
}

CIMGUI_API void cimgui::PopItemFlag(void)
{
    ::ImGui::PopItemFlag();
}

CIMGUI_API void  cimgui::PushItemWidth(float item_width)
{
    ::ImGui::PushItemWidth(item_width);
}

CIMGUI_API void  cimgui::PopItemWidth(void)
{
    ::ImGui::PopItemWidth();
}

CIMGUI_API void  cimgui::SetNextItemWidth(float item_width)
{
    ::ImGui::SetNextItemWidth(item_width);
}

CIMGUI_API float cimgui::CalcItemWidth(void)
{
    return ::ImGui::CalcItemWidth();
}

CIMGUI_API void  cimgui::PushTextWrapPos(float wrap_local_pos_x)
{
    ::ImGui::PushTextWrapPos(wrap_local_pos_x);
}

CIMGUI_API void  cimgui::PopTextWrapPos(void)
{
    ::ImGui::PopTextWrapPos();
}

CIMGUI_API cimgui::ImFont* cimgui::GetFont(void)
{
    return reinterpret_cast<::cimgui::ImFont*>(::ImGui::GetFont());
}

CIMGUI_API float         cimgui::GetFontSize(void)
{
    return ::ImGui::GetFontSize();
}

CIMGUI_API cimgui::ImVec2 cimgui::GetFontTexUvWhitePixel(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetFontTexUvWhitePixel());
}

CIMGUI_API ImU32         cimgui::GetColorU32(ImGuiCol idx)
{
    return ::ImGui::GetColorU32(idx);
}

CIMGUI_API ImU32         cimgui::GetColorU32Ex(ImGuiCol idx, float alpha_mul)
{
    return ::ImGui::GetColorU32(idx, alpha_mul);
}

CIMGUI_API ImU32         cimgui::GetColorU32ImVec4(cimgui::ImVec4 col)
{
    return ::ImGui::GetColorU32(ConvertToCPP_ImVec4(col));
}

CIMGUI_API ImU32         cimgui::GetColorU32ImU32(ImU32 col)
{
    return ::ImGui::GetColorU32(col);
}

CIMGUI_API ImU32         cimgui::GetColorU32ImU32Ex(ImU32 col, float alpha_mul)
{
    return ::ImGui::GetColorU32(col, alpha_mul);
}

CIMGUI_API const cimgui::ImVec4* cimgui::GetStyleColorVec4(ImGuiCol idx)
{
    return reinterpret_cast<const ::cimgui::ImVec4*>(&::ImGui::GetStyleColorVec4(idx));
}

CIMGUI_API cimgui::ImVec2 cimgui::GetCursorScreenPos(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetCursorScreenPos());
}

CIMGUI_API void   cimgui::SetCursorScreenPos(cimgui::ImVec2 pos)
{
    ::ImGui::SetCursorScreenPos(ConvertToCPP_ImVec2(pos));
}

CIMGUI_API cimgui::ImVec2 cimgui::GetContentRegionAvail(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetContentRegionAvail());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetCursorPos(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetCursorPos());
}

CIMGUI_API float  cimgui::GetCursorPosX(void)
{
    return ::ImGui::GetCursorPosX();
}

CIMGUI_API float  cimgui::GetCursorPosY(void)
{
    return ::ImGui::GetCursorPosY();
}

CIMGUI_API void   cimgui::SetCursorPos(cimgui::ImVec2 local_pos)
{
    ::ImGui::SetCursorPos(ConvertToCPP_ImVec2(local_pos));
}

CIMGUI_API void   cimgui::SetCursorPosX(float local_x)
{
    ::ImGui::SetCursorPosX(local_x);
}

CIMGUI_API void   cimgui::SetCursorPosY(float local_y)
{
    ::ImGui::SetCursorPosY(local_y);
}

CIMGUI_API cimgui::ImVec2 cimgui::GetCursorStartPos(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetCursorStartPos());
}

CIMGUI_API void  cimgui::Separator(void)
{
    ::ImGui::Separator();
}

CIMGUI_API void  cimgui::SameLine(void)
{
    ::ImGui::SameLine();
}

CIMGUI_API void  cimgui::SameLineEx(float offset_from_start_x, float spacing)
{
    ::ImGui::SameLine(offset_from_start_x, spacing);
}

CIMGUI_API void  cimgui::NewLine(void)
{
    ::ImGui::NewLine();
}

CIMGUI_API void  cimgui::Spacing(void)
{
    ::ImGui::Spacing();
}

CIMGUI_API void  cimgui::Dummy(cimgui::ImVec2 size)
{
    ::ImGui::Dummy(ConvertToCPP_ImVec2(size));
}

CIMGUI_API void  cimgui::Indent(void)
{
    ::ImGui::Indent();
}

CIMGUI_API void  cimgui::IndentEx(float indent_w)
{
    ::ImGui::Indent(indent_w);
}

CIMGUI_API void  cimgui::Unindent(void)
{
    ::ImGui::Unindent();
}

CIMGUI_API void  cimgui::UnindentEx(float indent_w)
{
    ::ImGui::Unindent(indent_w);
}

CIMGUI_API void  cimgui::BeginGroup(void)
{
    ::ImGui::BeginGroup();
}

CIMGUI_API void  cimgui::EndGroup(void)
{
    ::ImGui::EndGroup();
}

CIMGUI_API void  cimgui::AlignTextToFramePadding(void)
{
    ::ImGui::AlignTextToFramePadding();
}

CIMGUI_API float cimgui::GetTextLineHeight(void)
{
    return ::ImGui::GetTextLineHeight();
}

CIMGUI_API float cimgui::GetTextLineHeightWithSpacing(void)
{
    return ::ImGui::GetTextLineHeightWithSpacing();
}

CIMGUI_API float cimgui::GetFrameHeight(void)
{
    return ::ImGui::GetFrameHeight();
}

CIMGUI_API float cimgui::GetFrameHeightWithSpacing(void)
{
    return ::ImGui::GetFrameHeightWithSpacing();
}

CIMGUI_API void    cimgui::PushID(const char* str_id)
{
    ::ImGui::PushID(str_id);
}

CIMGUI_API void    cimgui::PushIDStr(const char* str_id_begin, const char* str_id_end)
{
    ::ImGui::PushID(str_id_begin, str_id_end);
}

CIMGUI_API void    cimgui::PushIDPtr(const void* ptr_id)
{
    ::ImGui::PushID(ptr_id);
}

CIMGUI_API void    cimgui::PushIDInt(int int_id)
{
    ::ImGui::PushID(int_id);
}

CIMGUI_API void    cimgui::PopID(void)
{
    ::ImGui::PopID();
}

CIMGUI_API ImGuiID cimgui::GetID(const char* str_id)
{
    return ::ImGui::GetID(str_id);
}

CIMGUI_API ImGuiID cimgui::GetIDStr(const char* str_id_begin, const char* str_id_end)
{
    return ::ImGui::GetID(str_id_begin, str_id_end);
}

CIMGUI_API ImGuiID cimgui::GetIDPtr(const void* ptr_id)
{
    return ::ImGui::GetID(ptr_id);
}

CIMGUI_API ImGuiID cimgui::GetIDInt(int int_id)
{
    return ::ImGui::GetID(int_id);
}

CIMGUI_API void cimgui::TextUnformatted(const char* text)
{
    ::ImGui::TextUnformatted(text);
}

CIMGUI_API void cimgui::TextUnformattedEx(const char* text, const char* text_end)
{
    ::ImGui::TextUnformatted(text, text_end);
}

CIMGUI_API void cimgui::Text(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::TextV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::TextV(const char* fmt, va_list args)
{
    ::ImGui::TextV(fmt, args);
}

CIMGUI_API void cimgui::TextColored(cimgui::ImVec4 col, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::TextColoredV(ConvertToCPP_ImVec4(col), fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::TextColoredV(cimgui::ImVec4 col, const char* fmt, va_list args)
{
    ::ImGui::TextColoredV(ConvertToCPP_ImVec4(col), fmt, args);
}

CIMGUI_API void cimgui::TextDisabled(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::TextDisabledV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::TextDisabledV(const char* fmt, va_list args)
{
    ::ImGui::TextDisabledV(fmt, args);
}

CIMGUI_API void cimgui::TextWrapped(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::TextWrappedV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::TextWrappedV(const char* fmt, va_list args)
{
    ::ImGui::TextWrappedV(fmt, args);
}

CIMGUI_API void cimgui::LabelText(const char* label, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::LabelTextV(label, fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::LabelTextV(const char* label, const char* fmt, va_list args)
{
    ::ImGui::LabelTextV(label, fmt, args);
}

CIMGUI_API void cimgui::BulletText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::BulletTextV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::BulletTextV(const char* fmt, va_list args)
{
    ::ImGui::BulletTextV(fmt, args);
}

CIMGUI_API void cimgui::SeparatorText(const char* label)
{
    ::ImGui::SeparatorText(label);
}

CIMGUI_API bool cimgui::Button(const char* label)
{
    return ::ImGui::Button(label);
}

CIMGUI_API bool cimgui::ButtonEx(const char* label, cimgui::ImVec2 size)
{
    return ::ImGui::Button(label, ConvertToCPP_ImVec2(size));
}

CIMGUI_API bool cimgui::SmallButton(const char* label)
{
    return ::ImGui::SmallButton(label);
}

CIMGUI_API bool cimgui::InvisibleButton(const char* str_id, cimgui::ImVec2 size, ImGuiButtonFlags flags)
{
    return ::ImGui::InvisibleButton(str_id, ConvertToCPP_ImVec2(size), flags);
}

CIMGUI_API bool cimgui::ArrowButton(const char* str_id, cimgui::ImGuiDir dir)
{
    return ::ImGui::ArrowButton(str_id, static_cast<::ImGuiDir>(dir));
}

CIMGUI_API bool cimgui::Checkbox(const char* label, bool* v)
{
    return ::ImGui::Checkbox(label, v);
}

CIMGUI_API bool cimgui::CheckboxFlagsIntPtr(const char* label, int* flags, int flags_value)
{
    return ::ImGui::CheckboxFlags(label, flags, flags_value);
}

CIMGUI_API bool cimgui::CheckboxFlagsUintPtr(const char* label, unsigned int* flags, unsigned int flags_value)
{
    return ::ImGui::CheckboxFlags(label, flags, flags_value);
}

CIMGUI_API bool cimgui::RadioButton(const char* label, bool active)
{
    return ::ImGui::RadioButton(label, active);
}

CIMGUI_API bool cimgui::RadioButtonIntPtr(const char* label, int* v, int v_button)
{
    return ::ImGui::RadioButton(label, v, v_button);
}

CIMGUI_API void cimgui::ProgressBar(float fraction, cimgui::ImVec2 size_arg, const char* overlay)
{
    ::ImGui::ProgressBar(fraction, ConvertToCPP_ImVec2(size_arg), overlay);
}

CIMGUI_API void cimgui::Bullet(void)
{
    ::ImGui::Bullet();
}

CIMGUI_API bool cimgui::TextLink(const char* label)
{
    return ::ImGui::TextLink(label);
}

CIMGUI_API void cimgui::TextLinkOpenURL(const char* label)
{
    ::ImGui::TextLinkOpenURL(label);
}

CIMGUI_API void cimgui::TextLinkOpenURLEx(const char* label, const char* url)
{
    ::ImGui::TextLinkOpenURL(label, url);
}

CIMGUI_API void cimgui::Image(ImTextureID user_texture_id, cimgui::ImVec2 image_size)
{
    ::ImGui::Image(user_texture_id, ConvertToCPP_ImVec2(image_size));
}

CIMGUI_API void cimgui::ImageEx(ImTextureID user_texture_id, cimgui::ImVec2 image_size, cimgui::ImVec2 uv0, cimgui::ImVec2 uv1)
{
    ::ImGui::Image(user_texture_id, ConvertToCPP_ImVec2(image_size), ConvertToCPP_ImVec2(uv0), ConvertToCPP_ImVec2(uv1));
}

CIMGUI_API void cimgui::ImageWithBg(ImTextureID user_texture_id, cimgui::ImVec2 image_size)
{
    ::ImGui::ImageWithBg(user_texture_id, ConvertToCPP_ImVec2(image_size));
}

CIMGUI_API void cimgui::ImageWithBgEx(ImTextureID user_texture_id, cimgui::ImVec2 image_size, cimgui::ImVec2 uv0, cimgui::ImVec2 uv1, cimgui::ImVec4 bg_col, cimgui::ImVec4 tint_col)
{
    ::ImGui::ImageWithBg(user_texture_id, ConvertToCPP_ImVec2(image_size), ConvertToCPP_ImVec2(uv0), ConvertToCPP_ImVec2(uv1), ConvertToCPP_ImVec4(bg_col), ConvertToCPP_ImVec4(tint_col));
}

CIMGUI_API bool cimgui::ImageButton(const char* str_id, ImTextureID user_texture_id, cimgui::ImVec2 image_size)
{
    return ::ImGui::ImageButton(str_id, user_texture_id, ConvertToCPP_ImVec2(image_size));
}

CIMGUI_API bool cimgui::ImageButtonEx(const char* str_id, ImTextureID user_texture_id, cimgui::ImVec2 image_size, cimgui::ImVec2 uv0, cimgui::ImVec2 uv1, cimgui::ImVec4 bg_col, cimgui::ImVec4 tint_col)
{
    return ::ImGui::ImageButton(str_id, user_texture_id, ConvertToCPP_ImVec2(image_size), ConvertToCPP_ImVec2(uv0), ConvertToCPP_ImVec2(uv1), ConvertToCPP_ImVec4(bg_col), ConvertToCPP_ImVec4(tint_col));
}

CIMGUI_API bool cimgui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)
{
    return ::ImGui::BeginCombo(label, preview_value, flags);
}

CIMGUI_API void cimgui::EndCombo(void)
{
    ::ImGui::EndCombo();
}

CIMGUI_API bool cimgui::ComboChar(const char* label, int* current_item, const char*const items[], int items_count)
{
    return ::ImGui::Combo(label, current_item, items, items_count);
}

CIMGUI_API bool cimgui::ComboCharEx(const char* label, int* current_item, const char*const items[], int items_count, int popup_max_height_in_items)
{
    return ::ImGui::Combo(label, current_item, items, items_count, popup_max_height_in_items);
}

CIMGUI_API bool cimgui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros)
{
    return ::ImGui::Combo(label, current_item, items_separated_by_zeros);
}

CIMGUI_API bool cimgui::ComboEx(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items)
{
    return ::ImGui::Combo(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
}

CIMGUI_API bool cimgui::ComboCallback(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count)
{
    return ::ImGui::Combo(label, current_item, getter, user_data, items_count);
}

CIMGUI_API bool cimgui::ComboCallbackEx(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int popup_max_height_in_items)
{
    return ::ImGui::Combo(label, current_item, getter, user_data, items_count, popup_max_height_in_items);
}

CIMGUI_API bool cimgui::DragFloat(const char* label, float* v)
{
    return ::ImGui::DragFloat(label, v);
}

CIMGUI_API bool cimgui::DragFloatEx(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragFloat(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragFloat2(const char* label, float v[2])
{
    return ::ImGui::DragFloat2(label, v);
}

CIMGUI_API bool cimgui::DragFloat2Ex(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragFloat2(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragFloat3(const char* label, float v[3])
{
    return ::ImGui::DragFloat3(label, v);
}

CIMGUI_API bool cimgui::DragFloat3Ex(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragFloat3(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragFloat4(const char* label, float v[4])
{
    return ::ImGui::DragFloat4(label, v);
}

CIMGUI_API bool cimgui::DragFloat4Ex(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragFloat4(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max)
{
    return ::ImGui::DragFloatRange2(label, v_current_min, v_current_max);
}

CIMGUI_API bool cimgui::DragFloatRange2Ex(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags)
{
    return ::ImGui::DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
}

CIMGUI_API bool cimgui::DragInt(const char* label, int* v)
{
    return ::ImGui::DragInt(label, v);
}

CIMGUI_API bool cimgui::DragIntEx(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragInt(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragInt2(const char* label, int v[2])
{
    return ::ImGui::DragInt2(label, v);
}

CIMGUI_API bool cimgui::DragInt2Ex(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragInt2(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragInt3(const char* label, int v[3])
{
    return ::ImGui::DragInt3(label, v);
}

CIMGUI_API bool cimgui::DragInt3Ex(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragInt3(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragInt4(const char* label, int v[4])
{
    return ::ImGui::DragInt4(label, v);
}

CIMGUI_API bool cimgui::DragInt4Ex(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragInt4(label, v, v_speed, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max)
{
    return ::ImGui::DragIntRange2(label, v_current_min, v_current_max);
}

CIMGUI_API bool cimgui::DragIntRange2Ex(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags)
{
    return ::ImGui::DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
}

CIMGUI_API bool cimgui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data)
{
    return ::ImGui::DragScalar(label, data_type, p_data);
}

CIMGUI_API bool cimgui::DragScalarEx(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
}

CIMGUI_API bool cimgui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components)
{
    return ::ImGui::DragScalarN(label, data_type, p_data, components);
}

CIMGUI_API bool cimgui::DragScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
}

CIMGUI_API bool cimgui::SliderFloat(const char* label, float* v, float v_min, float v_max)
{
    return ::ImGui::SliderFloat(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderFloatEx(const char* label, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderFloat(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderFloat2(const char* label, float v[2], float v_min, float v_max)
{
    return ::ImGui::SliderFloat2(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderFloat2Ex(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderFloat2(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderFloat3(const char* label, float v[3], float v_min, float v_max)
{
    return ::ImGui::SliderFloat3(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderFloat3Ex(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderFloat3(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderFloat4(const char* label, float v[4], float v_min, float v_max)
{
    return ::ImGui::SliderFloat4(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderFloat4Ex(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderFloat4(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderAngle(const char* label, float* v_rad)
{
    return ::ImGui::SliderAngle(label, v_rad);
}

CIMGUI_API bool cimgui::SliderAngleEx(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
}

CIMGUI_API bool cimgui::SliderInt(const char* label, int* v, int v_min, int v_max)
{
    return ::ImGui::SliderInt(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderIntEx(const char* label, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderInt(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderInt2(const char* label, int v[2], int v_min, int v_max)
{
    return ::ImGui::SliderInt2(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderInt2Ex(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderInt2(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderInt3(const char* label, int v[3], int v_min, int v_max)
{
    return ::ImGui::SliderInt3(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderInt3Ex(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderInt3(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderInt4(const char* label, int v[4], int v_min, int v_max)
{
    return ::ImGui::SliderInt4(label, v, v_min, v_max);
}

CIMGUI_API bool cimgui::SliderInt4Ex(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderInt4(label, v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max)
{
    return ::ImGui::SliderScalar(label, data_type, p_data, p_min, p_max);
}

CIMGUI_API bool cimgui::SliderScalarEx(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderScalar(label, data_type, p_data, p_min, p_max, format, flags);
}

CIMGUI_API bool cimgui::SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max)
{
    return ::ImGui::SliderScalarN(label, data_type, p_data, components, p_min, p_max);
}

CIMGUI_API bool cimgui::SliderScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags);
}

CIMGUI_API bool cimgui::VSliderFloat(const char* label, cimgui::ImVec2 size, float* v, float v_min, float v_max)
{
    return ::ImGui::VSliderFloat(label, ConvertToCPP_ImVec2(size), v, v_min, v_max);
}

CIMGUI_API bool cimgui::VSliderFloatEx(const char* label, cimgui::ImVec2 size, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::VSliderFloat(label, ConvertToCPP_ImVec2(size), v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::VSliderInt(const char* label, cimgui::ImVec2 size, int* v, int v_min, int v_max)
{
    return ::ImGui::VSliderInt(label, ConvertToCPP_ImVec2(size), v, v_min, v_max);
}

CIMGUI_API bool cimgui::VSliderIntEx(const char* label, cimgui::ImVec2 size, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::VSliderInt(label, ConvertToCPP_ImVec2(size), v, v_min, v_max, format, flags);
}

CIMGUI_API bool cimgui::VSliderScalar(const char* label, cimgui::ImVec2 size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max)
{
    return ::ImGui::VSliderScalar(label, ConvertToCPP_ImVec2(size), data_type, p_data, p_min, p_max);
}

CIMGUI_API bool cimgui::VSliderScalarEx(const char* label, cimgui::ImVec2 size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    return ::ImGui::VSliderScalar(label, ConvertToCPP_ImVec2(size), data_type, p_data, p_min, p_max, format, flags);
}

CIMGUI_API bool cimgui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputText(label, buf, buf_size, flags);
}

CIMGUI_API bool cimgui::InputTextEx(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, cimgui::ImGuiInputTextCallback callback, void* user_data)
{
    return ::ImGui::InputText(label, buf, buf_size, flags, reinterpret_cast<::ImGuiInputTextCallback>(callback), user_data);
}

CIMGUI_API bool cimgui::InputTextMultiline(const char* label, char* buf, size_t buf_size)
{
    return ::ImGui::InputTextMultiline(label, buf, buf_size);
}

CIMGUI_API bool cimgui::InputTextMultilineEx(const char* label, char* buf, size_t buf_size, cimgui::ImVec2 size, ImGuiInputTextFlags flags, cimgui::ImGuiInputTextCallback callback, void* user_data)
{
    return ::ImGui::InputTextMultiline(label, buf, buf_size, ConvertToCPP_ImVec2(size), flags, reinterpret_cast<::ImGuiInputTextCallback>(callback), user_data);
}

CIMGUI_API bool cimgui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputTextWithHint(label, hint, buf, buf_size, flags);
}

CIMGUI_API bool cimgui::InputTextWithHintEx(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, cimgui::ImGuiInputTextCallback callback, void* user_data)
{
    return ::ImGui::InputTextWithHint(label, hint, buf, buf_size, flags, reinterpret_cast<::ImGuiInputTextCallback>(callback), user_data);
}

CIMGUI_API bool cimgui::InputFloat(const char* label, float* v)
{
    return ::ImGui::InputFloat(label, v);
}

CIMGUI_API bool cimgui::InputFloatEx(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputFloat(label, v, step, step_fast, format, flags);
}

CIMGUI_API bool cimgui::InputFloat2(const char* label, float v[2])
{
    return ::ImGui::InputFloat2(label, v);
}

CIMGUI_API bool cimgui::InputFloat2Ex(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputFloat2(label, v, format, flags);
}

CIMGUI_API bool cimgui::InputFloat3(const char* label, float v[3])
{
    return ::ImGui::InputFloat3(label, v);
}

CIMGUI_API bool cimgui::InputFloat3Ex(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputFloat3(label, v, format, flags);
}

CIMGUI_API bool cimgui::InputFloat4(const char* label, float v[4])
{
    return ::ImGui::InputFloat4(label, v);
}

CIMGUI_API bool cimgui::InputFloat4Ex(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputFloat4(label, v, format, flags);
}

CIMGUI_API bool cimgui::InputInt(const char* label, int* v)
{
    return ::ImGui::InputInt(label, v);
}

CIMGUI_API bool cimgui::InputIntEx(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputInt(label, v, step, step_fast, flags);
}

CIMGUI_API bool cimgui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)
{
    return ::ImGui::InputInt2(label, v, flags);
}

CIMGUI_API bool cimgui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)
{
    return ::ImGui::InputInt3(label, v, flags);
}

CIMGUI_API bool cimgui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)
{
    return ::ImGui::InputInt4(label, v, flags);
}

CIMGUI_API bool cimgui::InputDouble(const char* label, double* v)
{
    return ::ImGui::InputDouble(label, v);
}

CIMGUI_API bool cimgui::InputDoubleEx(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputDouble(label, v, step, step_fast, format, flags);
}

CIMGUI_API bool cimgui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data)
{
    return ::ImGui::InputScalar(label, data_type, p_data);
}

CIMGUI_API bool cimgui::InputScalarEx(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags);
}

CIMGUI_API bool cimgui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components)
{
    return ::ImGui::InputScalarN(label, data_type, p_data, components);
}

CIMGUI_API bool cimgui::InputScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    return ::ImGui::InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
}

CIMGUI_API bool cimgui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    return ::ImGui::ColorEdit3(label, col, flags);
}

CIMGUI_API bool cimgui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)
{
    return ::ImGui::ColorEdit4(label, col, flags);
}

CIMGUI_API bool cimgui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    return ::ImGui::ColorPicker3(label, col, flags);
}

CIMGUI_API bool cimgui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)
{
    return ::ImGui::ColorPicker4(label, col, flags, ref_col);
}

CIMGUI_API bool cimgui::ColorButton(const char* desc_id, cimgui::ImVec4 col, ImGuiColorEditFlags flags)
{
    return ::ImGui::ColorButton(desc_id, ConvertToCPP_ImVec4(col), flags);
}

CIMGUI_API bool cimgui::ColorButtonEx(const char* desc_id, cimgui::ImVec4 col, ImGuiColorEditFlags flags, cimgui::ImVec2 size)
{
    return ::ImGui::ColorButton(desc_id, ConvertToCPP_ImVec4(col), flags, ConvertToCPP_ImVec2(size));
}

CIMGUI_API void cimgui::SetColorEditOptions(ImGuiColorEditFlags flags)
{
    ::ImGui::SetColorEditOptions(flags);
}

CIMGUI_API bool  cimgui::TreeNode(const char* label)
{
    return ::ImGui::TreeNode(label);
}

CIMGUI_API bool  cimgui::TreeNodeStr(const char* str_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    return ::ImGui::TreeNodeV(str_id, fmt, args);
    va_end(args);
}

CIMGUI_API bool  cimgui::TreeNodePtr(const void* ptr_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    return ::ImGui::TreeNodeV(ptr_id, fmt, args);
    va_end(args);
}

CIMGUI_API bool  cimgui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
    return ::ImGui::TreeNodeV(str_id, fmt, args);
}

CIMGUI_API bool  cimgui::TreeNodeVPtr(const void* ptr_id, const char* fmt, va_list args)
{
    return ::ImGui::TreeNodeV(ptr_id, fmt, args);
}

CIMGUI_API bool  cimgui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
    return ::ImGui::TreeNodeEx(label, flags);
}

CIMGUI_API bool  cimgui::TreeNodeExStr(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    return ::ImGui::TreeNodeExV(str_id, flags, fmt, args);
    va_end(args);
}

CIMGUI_API bool  cimgui::TreeNodeExPtr(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    return ::ImGui::TreeNodeExV(ptr_id, flags, fmt, args);
    va_end(args);
}

CIMGUI_API bool  cimgui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    return ::ImGui::TreeNodeExV(str_id, flags, fmt, args);
}

CIMGUI_API bool  cimgui::TreeNodeExVPtr(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    return ::ImGui::TreeNodeExV(ptr_id, flags, fmt, args);
}

CIMGUI_API void  cimgui::TreePush(const char* str_id)
{
    ::ImGui::TreePush(str_id);
}

CIMGUI_API void  cimgui::TreePushPtr(const void* ptr_id)
{
    ::ImGui::TreePush(ptr_id);
}

CIMGUI_API void  cimgui::TreePop(void)
{
    ::ImGui::TreePop();
}

CIMGUI_API float cimgui::GetTreeNodeToLabelSpacing(void)
{
    return ::ImGui::GetTreeNodeToLabelSpacing();
}

CIMGUI_API bool  cimgui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
    return ::ImGui::CollapsingHeader(label, flags);
}

CIMGUI_API bool  cimgui::CollapsingHeaderBoolPtr(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)
{
    return ::ImGui::CollapsingHeader(label, p_visible, flags);
}

CIMGUI_API void  cimgui::SetNextItemOpen(bool is_open, ImGuiCond cond)
{
    ::ImGui::SetNextItemOpen(is_open, cond);
}

CIMGUI_API void  cimgui::SetNextItemStorageID(ImGuiID storage_id)
{
    ::ImGui::SetNextItemStorageID(storage_id);
}

CIMGUI_API bool cimgui::Selectable(const char* label)
{
    return ::ImGui::Selectable(label);
}

CIMGUI_API bool cimgui::SelectableEx(const char* label, bool selected, ImGuiSelectableFlags flags, cimgui::ImVec2 size)
{
    return ::ImGui::Selectable(label, selected, flags, ConvertToCPP_ImVec2(size));
}

CIMGUI_API bool cimgui::SelectableBoolPtr(const char* label, bool* p_selected, ImGuiSelectableFlags flags)
{
    return ::ImGui::Selectable(label, p_selected, flags);
}

CIMGUI_API bool cimgui::SelectableBoolPtrEx(const char* label, bool* p_selected, ImGuiSelectableFlags flags, cimgui::ImVec2 size)
{
    return ::ImGui::Selectable(label, p_selected, flags, ConvertToCPP_ImVec2(size));
}

CIMGUI_API cimgui::ImGuiMultiSelectIO* cimgui::BeginMultiSelect(ImGuiMultiSelectFlags flags)
{
    return reinterpret_cast<::cimgui::ImGuiMultiSelectIO*>(::ImGui::BeginMultiSelect(flags));
}

CIMGUI_API cimgui::ImGuiMultiSelectIO* cimgui::BeginMultiSelectEx(ImGuiMultiSelectFlags flags, int selection_size, int items_count)
{
    return reinterpret_cast<::cimgui::ImGuiMultiSelectIO*>(::ImGui::BeginMultiSelect(flags, selection_size, items_count));
}

CIMGUI_API cimgui::ImGuiMultiSelectIO* cimgui::EndMultiSelect(void)
{
    return reinterpret_cast<::cimgui::ImGuiMultiSelectIO*>(::ImGui::EndMultiSelect());
}

CIMGUI_API void                cimgui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)
{
    ::ImGui::SetNextItemSelectionUserData(selection_user_data);
}

CIMGUI_API bool                cimgui::IsItemToggledSelection(void)
{
    return ::ImGui::IsItemToggledSelection();
}

CIMGUI_API bool cimgui::BeginListBox(const char* label, cimgui::ImVec2 size)
{
    return ::ImGui::BeginListBox(label, ConvertToCPP_ImVec2(size));
}

CIMGUI_API void cimgui::EndListBox(void)
{
    ::ImGui::EndListBox();
}

CIMGUI_API bool cimgui::ListBox(const char* label, int* current_item, const char*const items[], int items_count, int height_in_items)
{
    return ::ImGui::ListBox(label, current_item, items, items_count, height_in_items);
}

CIMGUI_API bool cimgui::ListBoxCallback(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count)
{
    return ::ImGui::ListBox(label, current_item, getter, user_data, items_count);
}

CIMGUI_API bool cimgui::ListBoxCallbackEx(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int height_in_items)
{
    return ::ImGui::ListBox(label, current_item, getter, user_data, items_count, height_in_items);
}

CIMGUI_API void cimgui::PlotLines(const char* label, const float* values, int values_count)
{
    ::ImGui::PlotLines(label, values, values_count);
}

CIMGUI_API void cimgui::PlotLinesEx(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, cimgui::ImVec2 graph_size, int stride)
{
    ::ImGui::PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, ConvertToCPP_ImVec2(graph_size), stride);
}

CIMGUI_API void cimgui::PlotLinesCallback(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count)
{
    ::ImGui::PlotLines(label, values_getter, data, values_count);
}

CIMGUI_API void cimgui::PlotLinesCallbackEx(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, cimgui::ImVec2 graph_size)
{
    ::ImGui::PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, ConvertToCPP_ImVec2(graph_size));
}

CIMGUI_API void cimgui::PlotHistogram(const char* label, const float* values, int values_count)
{
    ::ImGui::PlotHistogram(label, values, values_count);
}

CIMGUI_API void cimgui::PlotHistogramEx(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, cimgui::ImVec2 graph_size, int stride)
{
    ::ImGui::PlotHistogram(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, ConvertToCPP_ImVec2(graph_size), stride);
}

CIMGUI_API void cimgui::PlotHistogramCallback(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count)
{
    ::ImGui::PlotHistogram(label, values_getter, data, values_count);
}

CIMGUI_API void cimgui::PlotHistogramCallbackEx(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, cimgui::ImVec2 graph_size)
{
    ::ImGui::PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, ConvertToCPP_ImVec2(graph_size));
}

CIMGUI_API bool cimgui::BeginMenuBar(void)
{
    return ::ImGui::BeginMenuBar();
}

CIMGUI_API void cimgui::EndMenuBar(void)
{
    ::ImGui::EndMenuBar();
}

CIMGUI_API bool cimgui::BeginMainMenuBar(void)
{
    return ::ImGui::BeginMainMenuBar();
}

CIMGUI_API void cimgui::EndMainMenuBar(void)
{
    ::ImGui::EndMainMenuBar();
}

CIMGUI_API bool cimgui::BeginMenu(const char* label)
{
    return ::ImGui::BeginMenu(label);
}

CIMGUI_API bool cimgui::BeginMenuEx(const char* label, bool enabled)
{
    return ::ImGui::BeginMenu(label, enabled);
}

CIMGUI_API void cimgui::EndMenu(void)
{
    ::ImGui::EndMenu();
}

CIMGUI_API bool cimgui::MenuItem(const char* label)
{
    return ::ImGui::MenuItem(label);
}

CIMGUI_API bool cimgui::MenuItemEx(const char* label, const char* shortcut, bool selected, bool enabled)
{
    return ::ImGui::MenuItem(label, shortcut, selected, enabled);
}

CIMGUI_API bool cimgui::MenuItemBoolPtr(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
    return ::ImGui::MenuItem(label, shortcut, p_selected, enabled);
}

CIMGUI_API bool cimgui::BeginTooltip(void)
{
    return ::ImGui::BeginTooltip();
}

CIMGUI_API void cimgui::EndTooltip(void)
{
    ::ImGui::EndTooltip();
}

CIMGUI_API void cimgui::SetTooltip(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::SetTooltipV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::SetTooltipV(const char* fmt, va_list args)
{
    ::ImGui::SetTooltipV(fmt, args);
}

CIMGUI_API bool cimgui::BeginItemTooltip(void)
{
    return ::ImGui::BeginItemTooltip();
}

CIMGUI_API void cimgui::SetItemTooltip(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::SetItemTooltipV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::SetItemTooltipV(const char* fmt, va_list args)
{
    ::ImGui::SetItemTooltipV(fmt, args);
}

CIMGUI_API bool cimgui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)
{
    return ::ImGui::BeginPopup(str_id, flags);
}

CIMGUI_API bool cimgui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    return ::ImGui::BeginPopupModal(name, p_open, flags);
}

CIMGUI_API void cimgui::EndPopup(void)
{
    ::ImGui::EndPopup();
}

CIMGUI_API void cimgui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)
{
    ::ImGui::OpenPopup(str_id, popup_flags);
}

CIMGUI_API void cimgui::OpenPopupID(ImGuiID id, ImGuiPopupFlags popup_flags)
{
    ::ImGui::OpenPopup(id, popup_flags);
}

CIMGUI_API void cimgui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)
{
    ::ImGui::OpenPopupOnItemClick(str_id, popup_flags);
}

CIMGUI_API void cimgui::CloseCurrentPopup(void)
{
    ::ImGui::CloseCurrentPopup();
}

CIMGUI_API bool cimgui::BeginPopupContextItem(void)
{
    return ::ImGui::BeginPopupContextItem();
}

CIMGUI_API bool cimgui::BeginPopupContextItemEx(const char* str_id, ImGuiPopupFlags popup_flags)
{
    return ::ImGui::BeginPopupContextItem(str_id, popup_flags);
}

CIMGUI_API bool cimgui::BeginPopupContextWindow(void)
{
    return ::ImGui::BeginPopupContextWindow();
}

CIMGUI_API bool cimgui::BeginPopupContextWindowEx(const char* str_id, ImGuiPopupFlags popup_flags)
{
    return ::ImGui::BeginPopupContextWindow(str_id, popup_flags);
}

CIMGUI_API bool cimgui::BeginPopupContextVoid(void)
{
    return ::ImGui::BeginPopupContextVoid();
}

CIMGUI_API bool cimgui::BeginPopupContextVoidEx(const char* str_id, ImGuiPopupFlags popup_flags)
{
    return ::ImGui::BeginPopupContextVoid(str_id, popup_flags);
}

CIMGUI_API bool cimgui::IsPopupOpen(const char* str_id, ImGuiPopupFlags flags)
{
    return ::ImGui::IsPopupOpen(str_id, flags);
}

CIMGUI_API bool cimgui::BeginTable(const char* str_id, int columns, ImGuiTableFlags flags)
{
    return ::ImGui::BeginTable(str_id, columns, flags);
}

CIMGUI_API bool cimgui::BeginTableEx(const char* str_id, int columns, ImGuiTableFlags flags, cimgui::ImVec2 outer_size, float inner_width)
{
    return ::ImGui::BeginTable(str_id, columns, flags, ConvertToCPP_ImVec2(outer_size), inner_width);
}

CIMGUI_API void cimgui::EndTable(void)
{
    ::ImGui::EndTable();
}

CIMGUI_API void cimgui::TableNextRow(void)
{
    ::ImGui::TableNextRow();
}

CIMGUI_API void cimgui::TableNextRowEx(ImGuiTableRowFlags row_flags, float min_row_height)
{
    ::ImGui::TableNextRow(row_flags, min_row_height);
}

CIMGUI_API bool cimgui::TableNextColumn(void)
{
    return ::ImGui::TableNextColumn();
}

CIMGUI_API bool cimgui::TableSetColumnIndex(int column_n)
{
    return ::ImGui::TableSetColumnIndex(column_n);
}

CIMGUI_API void cimgui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags)
{
    ::ImGui::TableSetupColumn(label, flags);
}

CIMGUI_API void cimgui::TableSetupColumnEx(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
{
    ::ImGui::TableSetupColumn(label, flags, init_width_or_weight, user_id);
}

CIMGUI_API void cimgui::TableSetupScrollFreeze(int cols, int rows)
{
    ::ImGui::TableSetupScrollFreeze(cols, rows);
}

CIMGUI_API void cimgui::TableHeader(const char* label)
{
    ::ImGui::TableHeader(label);
}

CIMGUI_API void cimgui::TableHeadersRow(void)
{
    ::ImGui::TableHeadersRow();
}

CIMGUI_API void cimgui::TableAngledHeadersRow(void)
{
    ::ImGui::TableAngledHeadersRow();
}

CIMGUI_API cimgui::ImGuiTableSortSpecs* cimgui::TableGetSortSpecs(void)
{
    return reinterpret_cast<::cimgui::ImGuiTableSortSpecs*>(::ImGui::TableGetSortSpecs());
}

CIMGUI_API int                   cimgui::TableGetColumnCount(void)
{
    return ::ImGui::TableGetColumnCount();
}

CIMGUI_API int                   cimgui::TableGetColumnIndex(void)
{
    return ::ImGui::TableGetColumnIndex();
}

CIMGUI_API int                   cimgui::TableGetRowIndex(void)
{
    return ::ImGui::TableGetRowIndex();
}

CIMGUI_API const char*           cimgui::TableGetColumnName(int column_n)
{
    return ::ImGui::TableGetColumnName(column_n);
}

CIMGUI_API ImGuiTableColumnFlags cimgui::TableGetColumnFlags(int column_n)
{
    return ::ImGui::TableGetColumnFlags(column_n);
}

CIMGUI_API void                  cimgui::TableSetColumnEnabled(int column_n, bool v)
{
    ::ImGui::TableSetColumnEnabled(column_n, v);
}

CIMGUI_API int                   cimgui::TableGetHoveredColumn(void)
{
    return ::ImGui::TableGetHoveredColumn();
}

CIMGUI_API void                  cimgui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
{
    ::ImGui::TableSetBgColor(target, color, column_n);
}

CIMGUI_API void  cimgui::Columns(void)
{
    ::ImGui::Columns();
}

CIMGUI_API void  cimgui::ColumnsEx(int count, const char* id, bool borders)
{
    ::ImGui::Columns(count, id, borders);
}

CIMGUI_API void  cimgui::NextColumn(void)
{
    ::ImGui::NextColumn();
}

CIMGUI_API int   cimgui::GetColumnIndex(void)
{
    return ::ImGui::GetColumnIndex();
}

CIMGUI_API float cimgui::GetColumnWidth(int column_index)
{
    return ::ImGui::GetColumnWidth(column_index);
}

CIMGUI_API void  cimgui::SetColumnWidth(int column_index, float width)
{
    ::ImGui::SetColumnWidth(column_index, width);
}

CIMGUI_API float cimgui::GetColumnOffset(int column_index)
{
    return ::ImGui::GetColumnOffset(column_index);
}

CIMGUI_API void  cimgui::SetColumnOffset(int column_index, float offset_x)
{
    ::ImGui::SetColumnOffset(column_index, offset_x);
}

CIMGUI_API int   cimgui::GetColumnsCount(void)
{
    return ::ImGui::GetColumnsCount();
}

CIMGUI_API bool cimgui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)
{
    return ::ImGui::BeginTabBar(str_id, flags);
}

CIMGUI_API void cimgui::EndTabBar(void)
{
    ::ImGui::EndTabBar();
}

CIMGUI_API bool cimgui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)
{
    return ::ImGui::BeginTabItem(label, p_open, flags);
}

CIMGUI_API void cimgui::EndTabItem(void)
{
    ::ImGui::EndTabItem();
}

CIMGUI_API bool cimgui::TabItemButton(const char* label, ImGuiTabItemFlags flags)
{
    return ::ImGui::TabItemButton(label, flags);
}

CIMGUI_API void cimgui::SetTabItemClosed(const char* tab_or_docked_window_label)
{
    ::ImGui::SetTabItemClosed(tab_or_docked_window_label);
}

CIMGUI_API void cimgui::LogToTTY(int auto_open_depth)
{
    ::ImGui::LogToTTY(auto_open_depth);
}

CIMGUI_API void cimgui::LogToFile(int auto_open_depth, const char* filename)
{
    ::ImGui::LogToFile(auto_open_depth, filename);
}

CIMGUI_API void cimgui::LogToClipboard(int auto_open_depth)
{
    ::ImGui::LogToClipboard(auto_open_depth);
}

CIMGUI_API void cimgui::LogFinish(void)
{
    ::ImGui::LogFinish();
}

CIMGUI_API void cimgui::LogButtons(void)
{
    ::ImGui::LogButtons();
}

CIMGUI_API void cimgui::LogText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::LogTextV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::LogTextV(const char* fmt, va_list args)
{
    ::ImGui::LogTextV(fmt, args);
}

CIMGUI_API bool                cimgui::BeginDragDropSource(ImGuiDragDropFlags flags)
{
    return ::ImGui::BeginDragDropSource(flags);
}

CIMGUI_API bool                cimgui::SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond)
{
    return ::ImGui::SetDragDropPayload(type, data, sz, cond);
}

CIMGUI_API void                cimgui::EndDragDropSource(void)
{
    ::ImGui::EndDragDropSource();
}

CIMGUI_API bool                cimgui::BeginDragDropTarget(void)
{
    return ::ImGui::BeginDragDropTarget();
}

CIMGUI_API const cimgui::ImGuiPayload* cimgui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)
{
    return reinterpret_cast<const ::cimgui::ImGuiPayload*>(::ImGui::AcceptDragDropPayload(type, flags));
}

CIMGUI_API void                cimgui::EndDragDropTarget(void)
{
    ::ImGui::EndDragDropTarget();
}

CIMGUI_API const cimgui::ImGuiPayload* cimgui::GetDragDropPayload(void)
{
    return reinterpret_cast<const ::cimgui::ImGuiPayload*>(::ImGui::GetDragDropPayload());
}

CIMGUI_API void cimgui::BeginDisabled(bool disabled)
{
    ::ImGui::BeginDisabled(disabled);
}

CIMGUI_API void cimgui::EndDisabled(void)
{
    ::ImGui::EndDisabled();
}

CIMGUI_API void cimgui::PushClipRect(cimgui::ImVec2 clip_rect_min, cimgui::ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
{
    ::ImGui::PushClipRect(ConvertToCPP_ImVec2(clip_rect_min), ConvertToCPP_ImVec2(clip_rect_max), intersect_with_current_clip_rect);
}

CIMGUI_API void cimgui::PopClipRect(void)
{
    ::ImGui::PopClipRect();
}

CIMGUI_API void cimgui::SetItemDefaultFocus(void)
{
    ::ImGui::SetItemDefaultFocus();
}

CIMGUI_API void cimgui::SetKeyboardFocusHere(void)
{
    ::ImGui::SetKeyboardFocusHere();
}

CIMGUI_API void cimgui::SetKeyboardFocusHereEx(int offset)
{
    ::ImGui::SetKeyboardFocusHere(offset);
}

CIMGUI_API void cimgui::SetNavCursorVisible(bool visible)
{
    ::ImGui::SetNavCursorVisible(visible);
}

CIMGUI_API void cimgui::SetNextItemAllowOverlap(void)
{
    ::ImGui::SetNextItemAllowOverlap();
}

CIMGUI_API bool    cimgui::IsItemHovered(ImGuiHoveredFlags flags)
{
    return ::ImGui::IsItemHovered(flags);
}

CIMGUI_API bool    cimgui::IsItemActive(void)
{
    return ::ImGui::IsItemActive();
}

CIMGUI_API bool    cimgui::IsItemFocused(void)
{
    return ::ImGui::IsItemFocused();
}

CIMGUI_API bool    cimgui::IsItemClicked(void)
{
    return ::ImGui::IsItemClicked();
}

CIMGUI_API bool    cimgui::IsItemClickedEx(ImGuiMouseButton mouse_button)
{
    return ::ImGui::IsItemClicked(mouse_button);
}

CIMGUI_API bool    cimgui::IsItemVisible(void)
{
    return ::ImGui::IsItemVisible();
}

CIMGUI_API bool    cimgui::IsItemEdited(void)
{
    return ::ImGui::IsItemEdited();
}

CIMGUI_API bool    cimgui::IsItemActivated(void)
{
    return ::ImGui::IsItemActivated();
}

CIMGUI_API bool    cimgui::IsItemDeactivated(void)
{
    return ::ImGui::IsItemDeactivated();
}

CIMGUI_API bool    cimgui::IsItemDeactivatedAfterEdit(void)
{
    return ::ImGui::IsItemDeactivatedAfterEdit();
}

CIMGUI_API bool    cimgui::IsItemToggledOpen(void)
{
    return ::ImGui::IsItemToggledOpen();
}

CIMGUI_API bool    cimgui::IsAnyItemHovered(void)
{
    return ::ImGui::IsAnyItemHovered();
}

CIMGUI_API bool    cimgui::IsAnyItemActive(void)
{
    return ::ImGui::IsAnyItemActive();
}

CIMGUI_API bool    cimgui::IsAnyItemFocused(void)
{
    return ::ImGui::IsAnyItemFocused();
}

CIMGUI_API ImGuiID cimgui::GetItemID(void)
{
    return ::ImGui::GetItemID();
}

CIMGUI_API cimgui::ImVec2 cimgui::GetItemRectMin(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetItemRectMin());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetItemRectMax(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetItemRectMax());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetItemRectSize(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetItemRectSize());
}

CIMGUI_API cimgui::ImGuiViewport* cimgui::GetMainViewport(void)
{
    return reinterpret_cast<::cimgui::ImGuiViewport*>(::ImGui::GetMainViewport());
}

CIMGUI_API cimgui::ImDrawList* cimgui::GetBackgroundDrawList(void)
{
    return reinterpret_cast<::cimgui::ImDrawList*>(::ImGui::GetBackgroundDrawList());
}

CIMGUI_API cimgui::ImDrawList* cimgui::GetForegroundDrawList(void)
{
    return reinterpret_cast<::cimgui::ImDrawList*>(::ImGui::GetForegroundDrawList());
}

CIMGUI_API bool                  cimgui::IsRectVisibleBySize(cimgui::ImVec2 size)
{
    return ::ImGui::IsRectVisible(ConvertToCPP_ImVec2(size));
}

CIMGUI_API bool                  cimgui::IsRectVisible(cimgui::ImVec2 rect_min, cimgui::ImVec2 rect_max)
{
    return ::ImGui::IsRectVisible(ConvertToCPP_ImVec2(rect_min), ConvertToCPP_ImVec2(rect_max));
}

CIMGUI_API double                cimgui::GetTime(void)
{
    return ::ImGui::GetTime();
}

CIMGUI_API int                   cimgui::GetFrameCount(void)
{
    return ::ImGui::GetFrameCount();
}

CIMGUI_API cimgui::ImDrawListSharedData* cimgui::GetDrawListSharedData(void)
{
    return reinterpret_cast<::cimgui::ImDrawListSharedData*>(::ImGui::GetDrawListSharedData());
}

CIMGUI_API const char*           cimgui::GetStyleColorName(ImGuiCol idx)
{
    return ::ImGui::GetStyleColorName(idx);
}

CIMGUI_API void                  cimgui::SetStateStorage(cimgui::ImGuiStorage* storage)
{
    ::ImGui::SetStateStorage(reinterpret_cast<::ImGuiStorage*>(storage));
}

CIMGUI_API cimgui::ImGuiStorage* cimgui::GetStateStorage(void)
{
    return reinterpret_cast<::cimgui::ImGuiStorage*>(::ImGui::GetStateStorage());
}

CIMGUI_API cimgui::ImVec2 cimgui::CalcTextSize(const char* text)
{
    return ConvertFromCPP_ImVec2(::ImGui::CalcTextSize(text));
}

CIMGUI_API cimgui::ImVec2 cimgui::CalcTextSizeEx(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
{
    return ConvertFromCPP_ImVec2(::ImGui::CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width));
}

CIMGUI_API cimgui::ImVec4 cimgui::ColorConvertU32ToFloat4(ImU32 in)
{
    return ConvertFromCPP_ImVec4(::ImGui::ColorConvertU32ToFloat4(in));
}

CIMGUI_API ImU32  cimgui::ColorConvertFloat4ToU32(cimgui::ImVec4 in)
{
    return ::ImGui::ColorConvertFloat4ToU32(ConvertToCPP_ImVec4(in));
}

CIMGUI_API void   cimgui::ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v)
{
    ::ImGui::ColorConvertRGBtoHSV(r, g, b, *out_h, *out_s, *out_v);
}

CIMGUI_API void   cimgui::ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b)
{
    ::ImGui::ColorConvertHSVtoRGB(h, s, v, *out_r, *out_g, *out_b);
}

CIMGUI_API bool        cimgui::IsKeyDown(cimgui::ImGuiKey key)
{
    return ::ImGui::IsKeyDown(static_cast<::ImGuiKey>(key));
}

CIMGUI_API bool        cimgui::IsKeyPressed(cimgui::ImGuiKey key)
{
    return ::ImGui::IsKeyPressed(static_cast<::ImGuiKey>(key));
}

CIMGUI_API bool        cimgui::IsKeyPressedEx(cimgui::ImGuiKey key, bool repeat)
{
    return ::ImGui::IsKeyPressed(static_cast<::ImGuiKey>(key), repeat);
}

CIMGUI_API bool        cimgui::IsKeyReleased(cimgui::ImGuiKey key)
{
    return ::ImGui::IsKeyReleased(static_cast<::ImGuiKey>(key));
}

CIMGUI_API bool        cimgui::IsKeyChordPressed(ImGuiKeyChord key_chord)
{
    return ::ImGui::IsKeyChordPressed(key_chord);
}

CIMGUI_API int         cimgui::GetKeyPressedAmount(cimgui::ImGuiKey key, float repeat_delay, float rate)
{
    return ::ImGui::GetKeyPressedAmount(static_cast<::ImGuiKey>(key), repeat_delay, rate);
}

CIMGUI_API const char* cimgui::GetKeyName(cimgui::ImGuiKey key)
{
    return ::ImGui::GetKeyName(static_cast<::ImGuiKey>(key));
}

CIMGUI_API void        cimgui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
{
    ::ImGui::SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
}

CIMGUI_API bool cimgui::Shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
{
    return ::ImGui::Shortcut(key_chord, flags);
}

CIMGUI_API void cimgui::SetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
{
    ::ImGui::SetNextItemShortcut(key_chord, flags);
}

CIMGUI_API void cimgui::SetItemKeyOwner(cimgui::ImGuiKey key)
{
    ::ImGui::SetItemKeyOwner(static_cast<::ImGuiKey>(key));
}

CIMGUI_API bool             cimgui::IsMouseDown(ImGuiMouseButton button)
{
    return ::ImGui::IsMouseDown(button);
}

CIMGUI_API bool             cimgui::IsMouseClicked(ImGuiMouseButton button)
{
    return ::ImGui::IsMouseClicked(button);
}

CIMGUI_API bool             cimgui::IsMouseClickedEx(ImGuiMouseButton button, bool repeat)
{
    return ::ImGui::IsMouseClicked(button, repeat);
}

CIMGUI_API bool             cimgui::IsMouseReleased(ImGuiMouseButton button)
{
    return ::ImGui::IsMouseReleased(button);
}

CIMGUI_API bool             cimgui::IsMouseDoubleClicked(ImGuiMouseButton button)
{
    return ::ImGui::IsMouseDoubleClicked(button);
}

CIMGUI_API bool             cimgui::IsMouseReleasedWithDelay(ImGuiMouseButton button, float delay)
{
    return ::ImGui::IsMouseReleasedWithDelay(button, delay);
}

CIMGUI_API int              cimgui::GetMouseClickedCount(ImGuiMouseButton button)
{
    return ::ImGui::GetMouseClickedCount(button);
}

CIMGUI_API bool             cimgui::IsMouseHoveringRect(cimgui::ImVec2 r_min, cimgui::ImVec2 r_max)
{
    return ::ImGui::IsMouseHoveringRect(ConvertToCPP_ImVec2(r_min), ConvertToCPP_ImVec2(r_max));
}

CIMGUI_API bool             cimgui::IsMouseHoveringRectEx(cimgui::ImVec2 r_min, cimgui::ImVec2 r_max, bool clip)
{
    return ::ImGui::IsMouseHoveringRect(ConvertToCPP_ImVec2(r_min), ConvertToCPP_ImVec2(r_max), clip);
}

CIMGUI_API bool             cimgui::IsMousePosValid(const cimgui::ImVec2* mouse_pos)
{
    return ::ImGui::IsMousePosValid(reinterpret_cast<const ::ImVec2*>(mouse_pos));
}

CIMGUI_API bool             cimgui::IsAnyMouseDown(void)
{
    return ::ImGui::IsAnyMouseDown();
}

CIMGUI_API cimgui::ImVec2   cimgui::GetMousePos(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetMousePos());
}

CIMGUI_API cimgui::ImVec2   cimgui::GetMousePosOnOpeningCurrentPopup(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetMousePosOnOpeningCurrentPopup());
}

CIMGUI_API bool             cimgui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)
{
    return ::ImGui::IsMouseDragging(button, lock_threshold);
}

CIMGUI_API cimgui::ImVec2   cimgui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetMouseDragDelta(button, lock_threshold));
}

CIMGUI_API void             cimgui::ResetMouseDragDelta(void)
{
    ::ImGui::ResetMouseDragDelta();
}

CIMGUI_API void             cimgui::ResetMouseDragDeltaEx(ImGuiMouseButton button)
{
    ::ImGui::ResetMouseDragDelta(button);
}

CIMGUI_API ImGuiMouseCursor cimgui::GetMouseCursor(void)
{
    return ::ImGui::GetMouseCursor();
}

CIMGUI_API void             cimgui::SetMouseCursor(ImGuiMouseCursor cursor_type)
{
    ::ImGui::SetMouseCursor(cursor_type);
}

CIMGUI_API void             cimgui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)
{
    ::ImGui::SetNextFrameWantCaptureMouse(want_capture_mouse);
}

CIMGUI_API const char* cimgui::GetClipboardText(void)
{
    return ::ImGui::GetClipboardText();
}

CIMGUI_API void        cimgui::SetClipboardText(const char* text)
{
    ::ImGui::SetClipboardText(text);
}

CIMGUI_API void        cimgui::LoadIniSettingsFromDisk(const char* ini_filename)
{
    ::ImGui::LoadIniSettingsFromDisk(ini_filename);
}

CIMGUI_API void        cimgui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)
{
    ::ImGui::LoadIniSettingsFromMemory(ini_data, ini_size);
}

CIMGUI_API void        cimgui::SaveIniSettingsToDisk(const char* ini_filename)
{
    ::ImGui::SaveIniSettingsToDisk(ini_filename);
}

CIMGUI_API const char* cimgui::SaveIniSettingsToMemory(size_t* out_ini_size)
{
    return ::ImGui::SaveIniSettingsToMemory(out_ini_size);
}

CIMGUI_API void  cimgui::DebugTextEncoding(const char* text)
{
    ::ImGui::DebugTextEncoding(text);
}

CIMGUI_API void  cimgui::DebugFlashStyleColor(ImGuiCol idx)
{
    ::ImGui::DebugFlashStyleColor(idx);
}

CIMGUI_API void  cimgui::DebugStartItemPicker(void)
{
    ::ImGui::DebugStartItemPicker();
}

CIMGUI_API bool  cimgui::DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
{
    return ::ImGui::DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
}

#ifndef IMGUI_DISABLE_DEBUG_TOOLS

CIMGUI_API void cimgui::DebugLog(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    ::ImGui::DebugLogV(fmt, args);
    va_end(args);
}

CIMGUI_API void cimgui::DebugLogV(const char* fmt, va_list args)
{
    ::ImGui::DebugLogV(fmt, args);
}

#endif // #ifndef IMGUI_DISABLE_DEBUG_TOOLS

CIMGUI_API void  cimgui::SetAllocatorFunctions(cimgui::ImGuiMemAllocFunc alloc_func, cimgui::ImGuiMemFreeFunc free_func, void* user_data)
{
    ::ImGui::SetAllocatorFunctions(reinterpret_cast<::ImGuiMemAllocFunc>(alloc_func), reinterpret_cast<::ImGuiMemFreeFunc>(free_func), user_data);
}

CIMGUI_API void  cimgui::GetAllocatorFunctions(cimgui::ImGuiMemAllocFunc* p_alloc_func, cimgui::ImGuiMemFreeFunc* p_free_func, void** p_user_data)
{
    ::ImGui::GetAllocatorFunctions(reinterpret_cast<::ImGuiMemAllocFunc*>(p_alloc_func), reinterpret_cast<::ImGuiMemFreeFunc*>(p_free_func), p_user_data);
}

CIMGUI_API void* cimgui::MemAlloc(size_t size)
{
    return ::ImGui::MemAlloc(size);
}

CIMGUI_API void  cimgui::MemFree(void* ptr)
{
    ::ImGui::MemFree(ptr);
}

CIMGUI_API void cimgui::ImGuiStyle_ScaleAllSizes(cimgui::ImGuiStyle* self, float scale_factor)
{
    reinterpret_cast<::ImGuiStyle*>(self)->ScaleAllSizes(scale_factor);
}

CIMGUI_API void cimgui::ImGuiIO_AddKeyEvent(cimgui::ImGuiIO* self, cimgui::ImGuiKey key, bool down)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddKeyEvent(static_cast<::ImGuiKey>(key), down);
}

CIMGUI_API void cimgui::ImGuiIO_AddKeyAnalogEvent(cimgui::ImGuiIO* self, cimgui::ImGuiKey key, bool down, float v)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddKeyAnalogEvent(static_cast<::ImGuiKey>(key), down, v);
}

CIMGUI_API void cimgui::ImGuiIO_AddMousePosEvent(cimgui::ImGuiIO* self, float x, float y)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddMousePosEvent(x, y);
}

CIMGUI_API void cimgui::ImGuiIO_AddMouseButtonEvent(cimgui::ImGuiIO* self, int button, bool down)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddMouseButtonEvent(button, down);
}

CIMGUI_API void cimgui::ImGuiIO_AddMouseWheelEvent(cimgui::ImGuiIO* self, float wheel_x, float wheel_y)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddMouseWheelEvent(wheel_x, wheel_y);
}

CIMGUI_API void cimgui::ImGuiIO_AddMouseSourceEvent(cimgui::ImGuiIO* self, cimgui::ImGuiMouseSource source)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddMouseSourceEvent(static_cast<::ImGuiMouseSource>(source));
}

CIMGUI_API void cimgui::ImGuiIO_AddFocusEvent(cimgui::ImGuiIO* self, bool focused)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddFocusEvent(focused);
}

CIMGUI_API void cimgui::ImGuiIO_AddInputCharacter(cimgui::ImGuiIO* self, unsigned int c)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddInputCharacter(c);
}

CIMGUI_API void cimgui::ImGuiIO_AddInputCharacterUTF16(cimgui::ImGuiIO* self, ImWchar16 c)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddInputCharacterUTF16(c);
}

CIMGUI_API void cimgui::ImGuiIO_AddInputCharactersUTF8(cimgui::ImGuiIO* self, const char* str)
{
    reinterpret_cast<::ImGuiIO*>(self)->AddInputCharactersUTF8(str);
}

CIMGUI_API void cimgui::ImGuiIO_SetKeyEventNativeData(cimgui::ImGuiIO* self, cimgui::ImGuiKey key, int native_keycode, int native_scancode)
{
    reinterpret_cast<::ImGuiIO*>(self)->SetKeyEventNativeData(static_cast<::ImGuiKey>(key), native_keycode, native_scancode);
}

CIMGUI_API void cimgui::ImGuiIO_SetKeyEventNativeDataEx(cimgui::ImGuiIO* self, cimgui::ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
{
    reinterpret_cast<::ImGuiIO*>(self)->SetKeyEventNativeData(static_cast<::ImGuiKey>(key), native_keycode, native_scancode, native_legacy_index);
}

CIMGUI_API void cimgui::ImGuiIO_SetAppAcceptingEvents(cimgui::ImGuiIO* self, bool accepting_events)
{
    reinterpret_cast<::ImGuiIO*>(self)->SetAppAcceptingEvents(accepting_events);
}

CIMGUI_API void cimgui::ImGuiIO_ClearEventsQueue(cimgui::ImGuiIO* self)
{
    reinterpret_cast<::ImGuiIO*>(self)->ClearEventsQueue();
}

CIMGUI_API void cimgui::ImGuiIO_ClearInputKeys(cimgui::ImGuiIO* self)
{
    reinterpret_cast<::ImGuiIO*>(self)->ClearInputKeys();
}

CIMGUI_API void cimgui::ImGuiIO_ClearInputMouse(cimgui::ImGuiIO* self)
{
    reinterpret_cast<::ImGuiIO*>(self)->ClearInputMouse();
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

CIMGUI_API void cimgui::ImGuiIO_ClearInputCharacters(cimgui::ImGuiIO* self)
{
    reinterpret_cast<::ImGuiIO*>(self)->ClearInputCharacters();
}

#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

CIMGUI_API void cimgui::ImGuiInputTextCallbackData_DeleteChars(cimgui::ImGuiInputTextCallbackData* self, int pos, int bytes_count)
{
    reinterpret_cast<::ImGuiInputTextCallbackData*>(self)->DeleteChars(pos, bytes_count);
}

CIMGUI_API void cimgui::ImGuiInputTextCallbackData_InsertChars(cimgui::ImGuiInputTextCallbackData* self, int pos, const char* text, const char* text_end)
{
    reinterpret_cast<::ImGuiInputTextCallbackData*>(self)->InsertChars(pos, text, text_end);
}

CIMGUI_API void cimgui::ImGuiInputTextCallbackData_SelectAll(cimgui::ImGuiInputTextCallbackData* self)
{
    reinterpret_cast<::ImGuiInputTextCallbackData*>(self)->SelectAll();
}

CIMGUI_API void cimgui::ImGuiInputTextCallbackData_ClearSelection(cimgui::ImGuiInputTextCallbackData* self)
{
    reinterpret_cast<::ImGuiInputTextCallbackData*>(self)->ClearSelection();
}

CIMGUI_API bool cimgui::ImGuiInputTextCallbackData_HasSelection(const cimgui::ImGuiInputTextCallbackData* self)
{
    return reinterpret_cast<const ::ImGuiInputTextCallbackData*>(self)->HasSelection();
}

CIMGUI_API void cimgui::ImGuiPayload_Clear(cimgui::ImGuiPayload* self)
{
    reinterpret_cast<::ImGuiPayload*>(self)->Clear();
}

CIMGUI_API bool cimgui::ImGuiPayload_IsDataType(const cimgui::ImGuiPayload* self, const char* type)
{
    return reinterpret_cast<const ::ImGuiPayload*>(self)->IsDataType(type);
}

CIMGUI_API bool cimgui::ImGuiPayload_IsPreview(const cimgui::ImGuiPayload* self)
{
    return reinterpret_cast<const ::ImGuiPayload*>(self)->IsPreview();
}

CIMGUI_API bool cimgui::ImGuiPayload_IsDelivery(const cimgui::ImGuiPayload* self)
{
    return reinterpret_cast<const ::ImGuiPayload*>(self)->IsDelivery();
}

CIMGUI_API bool cimgui::ImGuiTextFilter_ImGuiTextRange_empty(const cimgui::ImGuiTextFilter_ImGuiTextRange* self)
{
    return reinterpret_cast<const ::ImGuiTextFilter::ImGuiTextRange*>(self)->empty();
}

CIMGUI_API void cimgui::ImGuiTextFilter_ImGuiTextRange_split(const cimgui::ImGuiTextFilter_ImGuiTextRange* self, char separator, cimgui::ImVector_ImGuiTextFilter_ImGuiTextRange* out)
{
    reinterpret_cast<const ::ImGuiTextFilter::ImGuiTextRange*>(self)->split(separator, reinterpret_cast<::ImVector<::ImGuiTextFilter::ImGuiTextRange>*>(out));
}

CIMGUI_API bool cimgui::ImGuiTextFilter_Draw(cimgui::ImGuiTextFilter* self, const char* label, float width)
{
    return reinterpret_cast<::ImGuiTextFilter*>(self)->Draw(label, width);
}

CIMGUI_API bool cimgui::ImGuiTextFilter_PassFilter(const cimgui::ImGuiTextFilter* self, const char* text, const char* text_end)
{
    return reinterpret_cast<const ::ImGuiTextFilter*>(self)->PassFilter(text, text_end);
}

CIMGUI_API void cimgui::ImGuiTextFilter_Build(cimgui::ImGuiTextFilter* self)
{
    reinterpret_cast<::ImGuiTextFilter*>(self)->Build();
}

CIMGUI_API void cimgui::ImGuiTextFilter_Clear(cimgui::ImGuiTextFilter* self)
{
    reinterpret_cast<::ImGuiTextFilter*>(self)->Clear();
}

CIMGUI_API bool cimgui::ImGuiTextFilter_IsActive(const cimgui::ImGuiTextFilter* self)
{
    return reinterpret_cast<const ::ImGuiTextFilter*>(self)->IsActive();
}

CIMGUI_API const char* cimgui::ImGuiTextBuffer_begin(const cimgui::ImGuiTextBuffer* self)
{
    return reinterpret_cast<const ::ImGuiTextBuffer*>(self)->begin();
}

CIMGUI_API const char* cimgui::ImGuiTextBuffer_end(const cimgui::ImGuiTextBuffer* self)
{
    return reinterpret_cast<const ::ImGuiTextBuffer*>(self)->end();
}

CIMGUI_API int         cimgui::ImGuiTextBuffer_size(const cimgui::ImGuiTextBuffer* self)
{
    return reinterpret_cast<const ::ImGuiTextBuffer*>(self)->size();
}

CIMGUI_API bool        cimgui::ImGuiTextBuffer_empty(const cimgui::ImGuiTextBuffer* self)
{
    return reinterpret_cast<const ::ImGuiTextBuffer*>(self)->empty();
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_clear(cimgui::ImGuiTextBuffer* self)
{
    reinterpret_cast<::ImGuiTextBuffer*>(self)->clear();
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_resize(cimgui::ImGuiTextBuffer* self, int size)
{
    reinterpret_cast<::ImGuiTextBuffer*>(self)->resize(size);
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_reserve(cimgui::ImGuiTextBuffer* self, int capacity)
{
    reinterpret_cast<::ImGuiTextBuffer*>(self)->reserve(capacity);
}

CIMGUI_API const char* cimgui::ImGuiTextBuffer_c_str(const cimgui::ImGuiTextBuffer* self)
{
    return reinterpret_cast<const ::ImGuiTextBuffer*>(self)->c_str();
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_append(cimgui::ImGuiTextBuffer* self, const char* str, const char* str_end)
{
    reinterpret_cast<::ImGuiTextBuffer*>(self)->append(str, str_end);
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_appendf(cimgui::ImGuiTextBuffer* self, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    reinterpret_cast<::ImGuiTextBuffer*>(self)->appendfv(fmt, args);
    va_end(args);
}

CIMGUI_API void        cimgui::ImGuiTextBuffer_appendfv(cimgui::ImGuiTextBuffer* self, const char* fmt, va_list args)
{
    reinterpret_cast<::ImGuiTextBuffer*>(self)->appendfv(fmt, args);
}

CIMGUI_API void   cimgui::ImGuiStorage_Clear(cimgui::ImGuiStorage* self)
{
    reinterpret_cast<::ImGuiStorage*>(self)->Clear();
}

CIMGUI_API int    cimgui::ImGuiStorage_GetInt(const cimgui::ImGuiStorage* self, ImGuiID key, int default_val)
{
    return reinterpret_cast<const ::ImGuiStorage*>(self)->GetInt(key, default_val);
}

CIMGUI_API void   cimgui::ImGuiStorage_SetInt(cimgui::ImGuiStorage* self, ImGuiID key, int val)
{
    reinterpret_cast<::ImGuiStorage*>(self)->SetInt(key, val);
}

CIMGUI_API bool   cimgui::ImGuiStorage_GetBool(const cimgui::ImGuiStorage* self, ImGuiID key, bool default_val)
{
    return reinterpret_cast<const ::ImGuiStorage*>(self)->GetBool(key, default_val);
}

CIMGUI_API void   cimgui::ImGuiStorage_SetBool(cimgui::ImGuiStorage* self, ImGuiID key, bool val)
{
    reinterpret_cast<::ImGuiStorage*>(self)->SetBool(key, val);
}

CIMGUI_API float  cimgui::ImGuiStorage_GetFloat(const cimgui::ImGuiStorage* self, ImGuiID key, float default_val)
{
    return reinterpret_cast<const ::ImGuiStorage*>(self)->GetFloat(key, default_val);
}

CIMGUI_API void   cimgui::ImGuiStorage_SetFloat(cimgui::ImGuiStorage* self, ImGuiID key, float val)
{
    reinterpret_cast<::ImGuiStorage*>(self)->SetFloat(key, val);
}

CIMGUI_API void*  cimgui::ImGuiStorage_GetVoidPtr(const cimgui::ImGuiStorage* self, ImGuiID key)
{
    return reinterpret_cast<const ::ImGuiStorage*>(self)->GetVoidPtr(key);
}

CIMGUI_API void   cimgui::ImGuiStorage_SetVoidPtr(cimgui::ImGuiStorage* self, ImGuiID key, void* val)
{
    reinterpret_cast<::ImGuiStorage*>(self)->SetVoidPtr(key, val);
}

CIMGUI_API int*   cimgui::ImGuiStorage_GetIntRef(cimgui::ImGuiStorage* self, ImGuiID key, int default_val)
{
    return reinterpret_cast<::ImGuiStorage*>(self)->GetIntRef(key, default_val);
}

CIMGUI_API bool*  cimgui::ImGuiStorage_GetBoolRef(cimgui::ImGuiStorage* self, ImGuiID key, bool default_val)
{
    return reinterpret_cast<::ImGuiStorage*>(self)->GetBoolRef(key, default_val);
}

CIMGUI_API float* cimgui::ImGuiStorage_GetFloatRef(cimgui::ImGuiStorage* self, ImGuiID key, float default_val)
{
    return reinterpret_cast<::ImGuiStorage*>(self)->GetFloatRef(key, default_val);
}

CIMGUI_API void** cimgui::ImGuiStorage_GetVoidPtrRef(cimgui::ImGuiStorage* self, ImGuiID key, void* default_val)
{
    return reinterpret_cast<::ImGuiStorage*>(self)->GetVoidPtrRef(key, default_val);
}

CIMGUI_API void   cimgui::ImGuiStorage_BuildSortByKey(cimgui::ImGuiStorage* self)
{
    reinterpret_cast<::ImGuiStorage*>(self)->BuildSortByKey();
}

CIMGUI_API void   cimgui::ImGuiStorage_SetAllInt(cimgui::ImGuiStorage* self, int val)
{
    reinterpret_cast<::ImGuiStorage*>(self)->SetAllInt(val);
}

CIMGUI_API void cimgui::ImGuiListClipper_Begin(cimgui::ImGuiListClipper* self, int items_count, float items_height)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->Begin(items_count, items_height);
}

CIMGUI_API void cimgui::ImGuiListClipper_End(cimgui::ImGuiListClipper* self)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->End();
}

CIMGUI_API bool cimgui::ImGuiListClipper_Step(cimgui::ImGuiListClipper* self)
{
    return reinterpret_cast<::ImGuiListClipper*>(self)->Step();
}

CIMGUI_API void cimgui::ImGuiListClipper_IncludeItemByIndex(cimgui::ImGuiListClipper* self, int item_index)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->IncludeItemByIndex(item_index);
}

CIMGUI_API void cimgui::ImGuiListClipper_IncludeItemsByIndex(cimgui::ImGuiListClipper* self, int item_begin, int item_end)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->IncludeItemsByIndex(item_begin, item_end);
}

CIMGUI_API void cimgui::ImGuiListClipper_SeekCursorForItem(cimgui::ImGuiListClipper* self, int item_index)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->SeekCursorForItem(item_index);
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

CIMGUI_API void cimgui::ImGuiListClipper_IncludeRangeByIndices(cimgui::ImGuiListClipper* self, int item_begin, int item_end)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->IncludeRangeByIndices(item_begin, item_end);
}

CIMGUI_API void cimgui::ImGuiListClipper_ForceDisplayRangeByIndices(cimgui::ImGuiListClipper* self, int item_begin, int item_end)
{
    reinterpret_cast<::ImGuiListClipper*>(self)->ForceDisplayRangeByIndices(item_begin, item_end);
}

#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

CIMGUI_API void    cimgui::ImColor_SetHSV(cimgui::ImColor* self, float h, float s, float v, float a)
{
    reinterpret_cast<::ImColor*>(self)->SetHSV(h, s, v, a);
}

CIMGUI_API cimgui::ImColor cimgui::ImColor_HSV(float h, float s, float v, float a)
{
    return ConvertFromCPP_ImColor(::ImColor::HSV(h, s, v, a));
}

CIMGUI_API void    cimgui::ImGuiSelectionBasicStorage_ApplyRequests(cimgui::ImGuiSelectionBasicStorage* self, cimgui::ImGuiMultiSelectIO* ms_io)
{
    reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->ApplyRequests(reinterpret_cast<::ImGuiMultiSelectIO*>(ms_io));
}

CIMGUI_API bool    cimgui::ImGuiSelectionBasicStorage_Contains(const cimgui::ImGuiSelectionBasicStorage* self, ImGuiID id)
{
    return reinterpret_cast<const ::ImGuiSelectionBasicStorage*>(self)->Contains(id);
}

CIMGUI_API void    cimgui::ImGuiSelectionBasicStorage_Clear(cimgui::ImGuiSelectionBasicStorage* self)
{
    reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->Clear();
}

CIMGUI_API void    cimgui::ImGuiSelectionBasicStorage_Swap(cimgui::ImGuiSelectionBasicStorage* self, cimgui::ImGuiSelectionBasicStorage* r)
{
    reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->Swap(reinterpret_cast<::ImGuiSelectionBasicStorage&>(*r));
}

CIMGUI_API void    cimgui::ImGuiSelectionBasicStorage_SetItemSelected(cimgui::ImGuiSelectionBasicStorage* self, ImGuiID id, bool selected)
{
    reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->SetItemSelected(id, selected);
}

CIMGUI_API bool    cimgui::ImGuiSelectionBasicStorage_GetNextSelectedItem(cimgui::ImGuiSelectionBasicStorage* self, void** opaque_it, ImGuiID* out_id)
{
    return reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->GetNextSelectedItem(opaque_it, out_id);
}

CIMGUI_API ImGuiID cimgui::ImGuiSelectionBasicStorage_GetStorageIdFromIndex(cimgui::ImGuiSelectionBasicStorage* self, int idx)
{
    return reinterpret_cast<::ImGuiSelectionBasicStorage*>(self)->GetStorageIdFromIndex(idx);
}

CIMGUI_API void cimgui::ImGuiSelectionExternalStorage_ApplyRequests(cimgui::ImGuiSelectionExternalStorage* self, cimgui::ImGuiMultiSelectIO* ms_io)
{
    reinterpret_cast<::ImGuiSelectionExternalStorage*>(self)->ApplyRequests(reinterpret_cast<::ImGuiMultiSelectIO*>(ms_io));
}

CIMGUI_API ImTextureID cimgui::ImDrawCmd_GetTexID(const cimgui::ImDrawCmd* self)
{
    return reinterpret_cast<const ::ImDrawCmd*>(self)->GetTexID();
}

CIMGUI_API void cimgui::ImDrawListSplitter_Clear(cimgui::ImDrawListSplitter* self)
{
    reinterpret_cast<::ImDrawListSplitter*>(self)->Clear();
}

CIMGUI_API void cimgui::ImDrawListSplitter_ClearFreeMemory(cimgui::ImDrawListSplitter* self)
{
    reinterpret_cast<::ImDrawListSplitter*>(self)->ClearFreeMemory();
}

CIMGUI_API void cimgui::ImDrawListSplitter_Split(cimgui::ImDrawListSplitter* self, cimgui::ImDrawList* draw_list, int count)
{
    reinterpret_cast<::ImDrawListSplitter*>(self)->Split(reinterpret_cast<::ImDrawList*>(draw_list), count);
}

CIMGUI_API void cimgui::ImDrawListSplitter_Merge(cimgui::ImDrawListSplitter* self, cimgui::ImDrawList* draw_list)
{
    reinterpret_cast<::ImDrawListSplitter*>(self)->Merge(reinterpret_cast<::ImDrawList*>(draw_list));
}

CIMGUI_API void cimgui::ImDrawListSplitter_SetCurrentChannel(cimgui::ImDrawListSplitter* self, cimgui::ImDrawList* draw_list, int channel_idx)
{
    reinterpret_cast<::ImDrawListSplitter*>(self)->SetCurrentChannel(reinterpret_cast<::ImDrawList*>(draw_list), channel_idx);
}

CIMGUI_API void        cimgui::ImDrawList_PushClipRect(cimgui::ImDrawList* self, cimgui::ImVec2 clip_rect_min, cimgui::ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
{
    reinterpret_cast<::ImDrawList*>(self)->PushClipRect(ConvertToCPP_ImVec2(clip_rect_min), ConvertToCPP_ImVec2(clip_rect_max), intersect_with_current_clip_rect);
}

CIMGUI_API void        cimgui::ImDrawList_PushClipRectFullScreen(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->PushClipRectFullScreen();
}

CIMGUI_API void        cimgui::ImDrawList_PopClipRect(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->PopClipRect();
}

CIMGUI_API void        cimgui::ImDrawList_PushTextureID(cimgui::ImDrawList* self, ImTextureID texture_id)
{
    reinterpret_cast<::ImDrawList*>(self)->PushTextureID(texture_id);
}

CIMGUI_API void        cimgui::ImDrawList_PopTextureID(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->PopTextureID();
}

CIMGUI_API cimgui::ImVec2 cimgui::ImDrawList_GetClipRectMin(const cimgui::ImDrawList* self)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<const ::ImDrawList*>(self)->GetClipRectMin());
}

CIMGUI_API cimgui::ImVec2 cimgui::ImDrawList_GetClipRectMax(const cimgui::ImDrawList* self)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<const ::ImDrawList*>(self)->GetClipRectMax());
}

CIMGUI_API void        cimgui::ImDrawList_AddLine(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddLine(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddLineEx(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, ImU32 col, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddLine(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), col, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddRect(cimgui::ImDrawList* self, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddRect(ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddRectEx(cimgui::ImDrawList* self, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddRect(ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), col, rounding, flags, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddRectFilled(cimgui::ImDrawList* self, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddRectFilled(ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddRectFilledEx(cimgui::ImDrawList* self, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags)
{
    reinterpret_cast<::ImDrawList*>(self)->AddRectFilled(ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), col, rounding, flags);
}

CIMGUI_API void        cimgui::ImDrawList_AddRectFilledMultiColor(cimgui::ImDrawList* self, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
{
    reinterpret_cast<::ImDrawList*>(self)->AddRectFilledMultiColor(ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), col_upr_left, col_upr_right, col_bot_right, col_bot_left);
}

CIMGUI_API void        cimgui::ImDrawList_AddQuad(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddQuad(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddQuadEx(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, ImU32 col, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddQuad(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), col, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddQuadFilled(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddQuadFilled(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddTriangle(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddTriangle(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddTriangleEx(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, ImU32 col, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddTriangle(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), col, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddTriangleFilled(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddTriangleFilled(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddCircle(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddCircle(ConvertToCPP_ImVec2(center), radius, col);
}

CIMGUI_API void        cimgui::ImDrawList_AddCircleEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddCircle(ConvertToCPP_ImVec2(center), radius, col, num_segments, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddCircleFilled(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddCircleFilled(ConvertToCPP_ImVec2(center), radius, col, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddNgon(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddNgon(ConvertToCPP_ImVec2(center), radius, col, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddNgonEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddNgon(ConvertToCPP_ImVec2(center), radius, col, num_segments, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddNgonFilled(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, ImU32 col, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddNgonFilled(ConvertToCPP_ImVec2(center), radius, col, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddEllipse(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddEllipse(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddEllipseEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, ImU32 col, float rot, int num_segments, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddEllipse(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), col, rot, num_segments, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddEllipseFilled(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddEllipseFilled(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddEllipseFilledEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, ImU32 col, float rot, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddEllipseFilled(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), col, rot, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddText(cimgui::ImDrawList* self, cimgui::ImVec2 pos, ImU32 col, const char* text_begin)
{
    reinterpret_cast<::ImDrawList*>(self)->AddText(ConvertToCPP_ImVec2(pos), col, text_begin);
}

CIMGUI_API void        cimgui::ImDrawList_AddTextEx(cimgui::ImDrawList* self, cimgui::ImVec2 pos, ImU32 col, const char* text_begin, const char* text_end)
{
    reinterpret_cast<::ImDrawList*>(self)->AddText(ConvertToCPP_ImVec2(pos), col, text_begin, text_end);
}

CIMGUI_API void        cimgui::ImDrawList_AddTextImFontPtr(cimgui::ImDrawList* self, cimgui::ImFont* font, float font_size, cimgui::ImVec2 pos, ImU32 col, const char* text_begin)
{
    reinterpret_cast<::ImDrawList*>(self)->AddText(reinterpret_cast<::ImFont*>(font), font_size, ConvertToCPP_ImVec2(pos), col, text_begin);
}

CIMGUI_API void        cimgui::ImDrawList_AddTextImFontPtrEx(cimgui::ImDrawList* self, cimgui::ImFont* font, float font_size, cimgui::ImVec2 pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const cimgui::ImVec4* cpu_fine_clip_rect)
{
    reinterpret_cast<::ImDrawList*>(self)->AddText(reinterpret_cast<::ImFont*>(font), font_size, ConvertToCPP_ImVec2(pos), col, text_begin, text_end, wrap_width, reinterpret_cast<const ::ImVec4*>(cpu_fine_clip_rect));
}

CIMGUI_API void        cimgui::ImDrawList_AddBezierCubic(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, ImU32 col, float thickness, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddBezierCubic(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), col, thickness, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddBezierQuadratic(cimgui::ImDrawList* self, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, ImU32 col, float thickness, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->AddBezierQuadratic(ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), col, thickness, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_AddPolyline(cimgui::ImDrawList* self, const cimgui::ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->AddPolyline(reinterpret_cast<const ::ImVec2*>(points), num_points, col, flags, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_AddConvexPolyFilled(cimgui::ImDrawList* self, const cimgui::ImVec2* points, int num_points, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddConvexPolyFilled(reinterpret_cast<const ::ImVec2*>(points), num_points, col);
}

CIMGUI_API void        cimgui::ImDrawList_AddConcavePolyFilled(cimgui::ImDrawList* self, const cimgui::ImVec2* points, int num_points, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddConcavePolyFilled(reinterpret_cast<const ::ImVec2*>(points), num_points, col);
}

CIMGUI_API void        cimgui::ImDrawList_AddImage(cimgui::ImDrawList* self, ImTextureID user_texture_id, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max)
{
    reinterpret_cast<::ImDrawList*>(self)->AddImage(user_texture_id, ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max));
}

CIMGUI_API void        cimgui::ImDrawList_AddImageEx(cimgui::ImDrawList* self, ImTextureID user_texture_id, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, cimgui::ImVec2 uv_min, cimgui::ImVec2 uv_max, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddImage(user_texture_id, ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), ConvertToCPP_ImVec2(uv_min), ConvertToCPP_ImVec2(uv_max), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddImageQuad(cimgui::ImDrawList* self, ImTextureID user_texture_id, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4)
{
    reinterpret_cast<::ImDrawList*>(self)->AddImageQuad(user_texture_id, ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4));
}

CIMGUI_API void        cimgui::ImDrawList_AddImageQuadEx(cimgui::ImDrawList* self, ImTextureID user_texture_id, cimgui::ImVec2 p1, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, cimgui::ImVec2 uv1, cimgui::ImVec2 uv2, cimgui::ImVec2 uv3, cimgui::ImVec2 uv4, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->AddImageQuad(user_texture_id, ConvertToCPP_ImVec2(p1), ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), ConvertToCPP_ImVec2(uv1), ConvertToCPP_ImVec2(uv2), ConvertToCPP_ImVec2(uv3), ConvertToCPP_ImVec2(uv4), col);
}

CIMGUI_API void        cimgui::ImDrawList_AddImageRounded(cimgui::ImDrawList* self, ImTextureID user_texture_id, cimgui::ImVec2 p_min, cimgui::ImVec2 p_max, cimgui::ImVec2 uv_min, cimgui::ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags)
{
    reinterpret_cast<::ImDrawList*>(self)->AddImageRounded(user_texture_id, ConvertToCPP_ImVec2(p_min), ConvertToCPP_ImVec2(p_max), ConvertToCPP_ImVec2(uv_min), ConvertToCPP_ImVec2(uv_max), col, rounding, flags);
}

CIMGUI_API void        cimgui::ImDrawList_PathClear(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->PathClear();
}

CIMGUI_API void        cimgui::ImDrawList_PathLineTo(cimgui::ImDrawList* self, cimgui::ImVec2 pos)
{
    reinterpret_cast<::ImDrawList*>(self)->PathLineTo(ConvertToCPP_ImVec2(pos));
}

CIMGUI_API void        cimgui::ImDrawList_PathLineToMergeDuplicate(cimgui::ImDrawList* self, cimgui::ImVec2 pos)
{
    reinterpret_cast<::ImDrawList*>(self)->PathLineToMergeDuplicate(ConvertToCPP_ImVec2(pos));
}

CIMGUI_API void        cimgui::ImDrawList_PathFillConvex(cimgui::ImDrawList* self, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PathFillConvex(col);
}

CIMGUI_API void        cimgui::ImDrawList_PathFillConcave(cimgui::ImDrawList* self, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PathFillConcave(col);
}

CIMGUI_API void        cimgui::ImDrawList_PathStroke(cimgui::ImDrawList* self, ImU32 col, ImDrawFlags flags, float thickness)
{
    reinterpret_cast<::ImDrawList*>(self)->PathStroke(col, flags, thickness);
}

CIMGUI_API void        cimgui::ImDrawList_PathArcTo(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, float a_min, float a_max, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->PathArcTo(ConvertToCPP_ImVec2(center), radius, a_min, a_max, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_PathArcToFast(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
{
    reinterpret_cast<::ImDrawList*>(self)->PathArcToFast(ConvertToCPP_ImVec2(center), radius, a_min_of_12, a_max_of_12);
}

CIMGUI_API void        cimgui::ImDrawList_PathEllipticalArcTo(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, float rot, float a_min, float a_max)
{
    reinterpret_cast<::ImDrawList*>(self)->PathEllipticalArcTo(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), rot, a_min, a_max);
}

CIMGUI_API void        cimgui::ImDrawList_PathEllipticalArcToEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, cimgui::ImVec2 radius, float rot, float a_min, float a_max, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->PathEllipticalArcTo(ConvertToCPP_ImVec2(center), ConvertToCPP_ImVec2(radius), rot, a_min, a_max, num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_PathBezierCubicCurveTo(cimgui::ImDrawList* self, cimgui::ImVec2 p2, cimgui::ImVec2 p3, cimgui::ImVec2 p4, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->PathBezierCubicCurveTo(ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), ConvertToCPP_ImVec2(p4), num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_PathBezierQuadraticCurveTo(cimgui::ImDrawList* self, cimgui::ImVec2 p2, cimgui::ImVec2 p3, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->PathBezierQuadraticCurveTo(ConvertToCPP_ImVec2(p2), ConvertToCPP_ImVec2(p3), num_segments);
}

CIMGUI_API void        cimgui::ImDrawList_PathRect(cimgui::ImDrawList* self, cimgui::ImVec2 rect_min, cimgui::ImVec2 rect_max, float rounding, ImDrawFlags flags)
{
    reinterpret_cast<::ImDrawList*>(self)->PathRect(ConvertToCPP_ImVec2(rect_min), ConvertToCPP_ImVec2(rect_max), rounding, flags);
}

CIMGUI_API void        cimgui::ImDrawList_AddCallback(cimgui::ImDrawList* self, cimgui::ImDrawCallback callback, void* userdata)
{
    reinterpret_cast<::ImDrawList*>(self)->AddCallback(reinterpret_cast<::ImDrawCallback>(callback), userdata);
}

CIMGUI_API void        cimgui::ImDrawList_AddCallbackEx(cimgui::ImDrawList* self, cimgui::ImDrawCallback callback, void* userdata, size_t userdata_size)
{
    reinterpret_cast<::ImDrawList*>(self)->AddCallback(reinterpret_cast<::ImDrawCallback>(callback), userdata, userdata_size);
}

CIMGUI_API void        cimgui::ImDrawList_AddDrawCmd(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->AddDrawCmd();
}

CIMGUI_API cimgui::ImDrawList* cimgui::ImDrawList_CloneOutput(const cimgui::ImDrawList* self)
{
    return reinterpret_cast<::cimgui::ImDrawList*>(reinterpret_cast<const ::ImDrawList*>(self)->CloneOutput());
}

CIMGUI_API void        cimgui::ImDrawList_ChannelsSplit(cimgui::ImDrawList* self, int count)
{
    reinterpret_cast<::ImDrawList*>(self)->ChannelsSplit(count);
}

CIMGUI_API void        cimgui::ImDrawList_ChannelsMerge(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->ChannelsMerge();
}

CIMGUI_API void        cimgui::ImDrawList_ChannelsSetCurrent(cimgui::ImDrawList* self, int n)
{
    reinterpret_cast<::ImDrawList*>(self)->ChannelsSetCurrent(n);
}

CIMGUI_API void        cimgui::ImDrawList_PrimReserve(cimgui::ImDrawList* self, int idx_count, int vtx_count)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimReserve(idx_count, vtx_count);
}

CIMGUI_API void        cimgui::ImDrawList_PrimUnreserve(cimgui::ImDrawList* self, int idx_count, int vtx_count)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimUnreserve(idx_count, vtx_count);
}

CIMGUI_API void        cimgui::ImDrawList_PrimRect(cimgui::ImDrawList* self, cimgui::ImVec2 a, cimgui::ImVec2 b, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimRect(ConvertToCPP_ImVec2(a), ConvertToCPP_ImVec2(b), col);
}

CIMGUI_API void        cimgui::ImDrawList_PrimRectUV(cimgui::ImDrawList* self, cimgui::ImVec2 a, cimgui::ImVec2 b, cimgui::ImVec2 uv_a, cimgui::ImVec2 uv_b, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimRectUV(ConvertToCPP_ImVec2(a), ConvertToCPP_ImVec2(b), ConvertToCPP_ImVec2(uv_a), ConvertToCPP_ImVec2(uv_b), col);
}

CIMGUI_API void        cimgui::ImDrawList_PrimQuadUV(cimgui::ImDrawList* self, cimgui::ImVec2 a, cimgui::ImVec2 b, cimgui::ImVec2 c, cimgui::ImVec2 d, cimgui::ImVec2 uv_a, cimgui::ImVec2 uv_b, cimgui::ImVec2 uv_c, cimgui::ImVec2 uv_d, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimQuadUV(ConvertToCPP_ImVec2(a), ConvertToCPP_ImVec2(b), ConvertToCPP_ImVec2(c), ConvertToCPP_ImVec2(d), ConvertToCPP_ImVec2(uv_a), ConvertToCPP_ImVec2(uv_b), ConvertToCPP_ImVec2(uv_c), ConvertToCPP_ImVec2(uv_d), col);
}

CIMGUI_API void        cimgui::ImDrawList_PrimWriteVtx(cimgui::ImDrawList* self, cimgui::ImVec2 pos, cimgui::ImVec2 uv, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimWriteVtx(ConvertToCPP_ImVec2(pos), ConvertToCPP_ImVec2(uv), col);
}

CIMGUI_API void        cimgui::ImDrawList_PrimWriteIdx(cimgui::ImDrawList* self, ImDrawIdx idx)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimWriteIdx(idx);
}

CIMGUI_API void        cimgui::ImDrawList_PrimVtx(cimgui::ImDrawList* self, cimgui::ImVec2 pos, cimgui::ImVec2 uv, ImU32 col)
{
    reinterpret_cast<::ImDrawList*>(self)->PrimVtx(ConvertToCPP_ImVec2(pos), ConvertToCPP_ImVec2(uv), col);
}

CIMGUI_API void        cimgui::ImDrawList__ResetForNewFrame(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_ResetForNewFrame();
}

CIMGUI_API void        cimgui::ImDrawList__ClearFreeMemory(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_ClearFreeMemory();
}

CIMGUI_API void        cimgui::ImDrawList__PopUnusedDrawCmd(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_PopUnusedDrawCmd();
}

CIMGUI_API void        cimgui::ImDrawList__TryMergeDrawCmds(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_TryMergeDrawCmds();
}

CIMGUI_API void        cimgui::ImDrawList__OnChangedClipRect(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_OnChangedClipRect();
}

CIMGUI_API void        cimgui::ImDrawList__OnChangedTextureID(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_OnChangedTextureID();
}

CIMGUI_API void        cimgui::ImDrawList__OnChangedVtxOffset(cimgui::ImDrawList* self)
{
    reinterpret_cast<::ImDrawList*>(self)->_OnChangedVtxOffset();
}

CIMGUI_API void        cimgui::ImDrawList__SetTextureID(cimgui::ImDrawList* self, ImTextureID texture_id)
{
    reinterpret_cast<::ImDrawList*>(self)->_SetTextureID(texture_id);
}

CIMGUI_API int         cimgui::ImDrawList__CalcCircleAutoSegmentCount(const cimgui::ImDrawList* self, float radius)
{
    return reinterpret_cast<const ::ImDrawList*>(self)->_CalcCircleAutoSegmentCount(radius);
}

CIMGUI_API void        cimgui::ImDrawList__PathArcToFastEx(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
{
    reinterpret_cast<::ImDrawList*>(self)->_PathArcToFastEx(ConvertToCPP_ImVec2(center), radius, a_min_sample, a_max_sample, a_step);
}

CIMGUI_API void        cimgui::ImDrawList__PathArcToN(cimgui::ImDrawList* self, cimgui::ImVec2 center, float radius, float a_min, float a_max, int num_segments)
{
    reinterpret_cast<::ImDrawList*>(self)->_PathArcToN(ConvertToCPP_ImVec2(center), radius, a_min, a_max, num_segments);
}

CIMGUI_API void cimgui::ImDrawData_Clear(cimgui::ImDrawData* self)
{
    reinterpret_cast<::ImDrawData*>(self)->Clear();
}

CIMGUI_API void cimgui::ImDrawData_AddDrawList(cimgui::ImDrawData* self, cimgui::ImDrawList* draw_list)
{
    reinterpret_cast<::ImDrawData*>(self)->AddDrawList(reinterpret_cast<::ImDrawList*>(draw_list));
}

CIMGUI_API void cimgui::ImDrawData_DeIndexAllBuffers(cimgui::ImDrawData* self)
{
    reinterpret_cast<::ImDrawData*>(self)->DeIndexAllBuffers();
}

CIMGUI_API void cimgui::ImDrawData_ScaleClipRects(cimgui::ImDrawData* self, cimgui::ImVec2 fb_scale)
{
    reinterpret_cast<::ImDrawData*>(self)->ScaleClipRects(ConvertToCPP_ImVec2(fb_scale));
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_Clear(cimgui::ImFontGlyphRangesBuilder* self)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->Clear();
}

CIMGUI_API bool cimgui::ImFontGlyphRangesBuilder_GetBit(const cimgui::ImFontGlyphRangesBuilder* self, size_t n)
{
    return reinterpret_cast<const ::ImFontGlyphRangesBuilder*>(self)->GetBit(n);
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_SetBit(cimgui::ImFontGlyphRangesBuilder* self, size_t n)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->SetBit(n);
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_AddChar(cimgui::ImFontGlyphRangesBuilder* self, ImWchar c)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->AddChar(c);
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_AddText(cimgui::ImFontGlyphRangesBuilder* self, const char* text, const char* text_end)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->AddText(text, text_end);
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_AddRanges(cimgui::ImFontGlyphRangesBuilder* self, const ImWchar* ranges)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->AddRanges(ranges);
}

CIMGUI_API void cimgui::ImFontGlyphRangesBuilder_BuildRanges(cimgui::ImFontGlyphRangesBuilder* self, cimgui::ImVector_ImWchar* out_ranges)
{
    reinterpret_cast<::ImFontGlyphRangesBuilder*>(self)->BuildRanges(reinterpret_cast<::ImVector<::ImWchar>*>(out_ranges));
}

CIMGUI_API bool cimgui::ImFontAtlasCustomRect_IsPacked(const cimgui::ImFontAtlasCustomRect* self)
{
    return reinterpret_cast<const ::ImFontAtlasCustomRect*>(self)->IsPacked();
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFont(cimgui::ImFontAtlas* self, const cimgui::ImFontConfig* font_cfg)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFont(reinterpret_cast<const ::ImFontConfig*>(font_cfg)));
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFontDefault(cimgui::ImFontAtlas* self, const cimgui::ImFontConfig* font_cfg)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFontDefault(reinterpret_cast<const ::ImFontConfig*>(font_cfg)));
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFontFromFileTTF(cimgui::ImFontAtlas* self, const char* filename, float size_pixels, const cimgui::ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFontFromFileTTF(filename, size_pixels, reinterpret_cast<const ::ImFontConfig*>(font_cfg), glyph_ranges));
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFontFromMemoryTTF(cimgui::ImFontAtlas* self, void* font_data, int font_data_size, float size_pixels, const cimgui::ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFontFromMemoryTTF(font_data, font_data_size, size_pixels, reinterpret_cast<const ::ImFontConfig*>(font_cfg), glyph_ranges));
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFontFromMemoryCompressedTTF(cimgui::ImFontAtlas* self, const void* compressed_font_data, int compressed_font_data_size, float size_pixels, const cimgui::ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFontFromMemoryCompressedTTF(compressed_font_data, compressed_font_data_size, size_pixels, reinterpret_cast<const ::ImFontConfig*>(font_cfg), glyph_ranges));
}

CIMGUI_API cimgui::ImFont*        cimgui::ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(cimgui::ImFontAtlas* self, const char* compressed_font_data_base85, float size_pixels, const cimgui::ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
{
    return reinterpret_cast<::cimgui::ImFont*>(reinterpret_cast<::ImFontAtlas*>(self)->AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85, size_pixels, reinterpret_cast<const ::ImFontConfig*>(font_cfg), glyph_ranges));
}

CIMGUI_API void                   cimgui::ImFontAtlas_ClearInputData(cimgui::ImFontAtlas* self)
{
    reinterpret_cast<::ImFontAtlas*>(self)->ClearInputData();
}

CIMGUI_API void                   cimgui::ImFontAtlas_ClearFonts(cimgui::ImFontAtlas* self)
{
    reinterpret_cast<::ImFontAtlas*>(self)->ClearFonts();
}

CIMGUI_API void                   cimgui::ImFontAtlas_ClearTexData(cimgui::ImFontAtlas* self)
{
    reinterpret_cast<::ImFontAtlas*>(self)->ClearTexData();
}

CIMGUI_API void                   cimgui::ImFontAtlas_Clear(cimgui::ImFontAtlas* self)
{
    reinterpret_cast<::ImFontAtlas*>(self)->Clear();
}

CIMGUI_API bool                   cimgui::ImFontAtlas_Build(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->Build();
}

CIMGUI_API void                   cimgui::ImFontAtlas_GetTexDataAsAlpha8(cimgui::ImFontAtlas* self, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)
{
    reinterpret_cast<::ImFontAtlas*>(self)->GetTexDataAsAlpha8(out_pixels, out_width, out_height, out_bytes_per_pixel);
}

CIMGUI_API void                   cimgui::ImFontAtlas_GetTexDataAsRGBA32(cimgui::ImFontAtlas* self, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel)
{
    reinterpret_cast<::ImFontAtlas*>(self)->GetTexDataAsRGBA32(out_pixels, out_width, out_height, out_bytes_per_pixel);
}

CIMGUI_API bool                   cimgui::ImFontAtlas_IsBuilt(const cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<const ::ImFontAtlas*>(self)->IsBuilt();
}

CIMGUI_API void                   cimgui::ImFontAtlas_SetTexID(cimgui::ImFontAtlas* self, ImTextureID id)
{
    reinterpret_cast<::ImFontAtlas*>(self)->SetTexID(id);
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesDefault(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesDefault();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesGreek(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesGreek();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesKorean(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesKorean();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesJapanese(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesJapanese();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesChineseFull(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesChineseFull();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesChineseSimplifiedCommon();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesCyrillic(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesCyrillic();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesThai(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesThai();
}

CIMGUI_API const ImWchar*         cimgui::ImFontAtlas_GetGlyphRangesVietnamese(cimgui::ImFontAtlas* self)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->GetGlyphRangesVietnamese();
}

CIMGUI_API int                    cimgui::ImFontAtlas_AddCustomRectRegular(cimgui::ImFontAtlas* self, int width, int height)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->AddCustomRectRegular(width, height);
}

CIMGUI_API int                    cimgui::ImFontAtlas_AddCustomRectFontGlyph(cimgui::ImFontAtlas* self, cimgui::ImFont* font, ImWchar id, int width, int height, float advance_x, cimgui::ImVec2 offset)
{
    return reinterpret_cast<::ImFontAtlas*>(self)->AddCustomRectFontGlyph(reinterpret_cast<::ImFont*>(font), id, width, height, advance_x, ConvertToCPP_ImVec2(offset));
}

CIMGUI_API cimgui::ImFontAtlasCustomRect* cimgui::ImFontAtlas_GetCustomRectByIndex(cimgui::ImFontAtlas* self, int index)
{
    return reinterpret_cast<::cimgui::ImFontAtlasCustomRect*>(reinterpret_cast<::ImFontAtlas*>(self)->GetCustomRectByIndex(index));
}

CIMGUI_API void                   cimgui::ImFontAtlas_CalcCustomRectUV(const cimgui::ImFontAtlas* self, const cimgui::ImFontAtlasCustomRect* rect, cimgui::ImVec2* out_uv_min, cimgui::ImVec2* out_uv_max)
{
    reinterpret_cast<const ::ImFontAtlas*>(self)->CalcCustomRectUV(reinterpret_cast<const ::ImFontAtlasCustomRect*>(rect), reinterpret_cast<::ImVec2*>(out_uv_min), reinterpret_cast<::ImVec2*>(out_uv_max));
}

CIMGUI_API cimgui::ImFontGlyph* cimgui::ImFont_FindGlyph(cimgui::ImFont* self, ImWchar c)
{
    return reinterpret_cast<::cimgui::ImFontGlyph*>(reinterpret_cast<::ImFont*>(self)->FindGlyph(c));
}

CIMGUI_API cimgui::ImFontGlyph* cimgui::ImFont_FindGlyphNoFallback(cimgui::ImFont* self, ImWchar c)
{
    return reinterpret_cast<::cimgui::ImFontGlyph*>(reinterpret_cast<::ImFont*>(self)->FindGlyphNoFallback(c));
}

CIMGUI_API float        cimgui::ImFont_GetCharAdvance(cimgui::ImFont* self, ImWchar c)
{
    return reinterpret_cast<::ImFont*>(self)->GetCharAdvance(c);
}

CIMGUI_API bool         cimgui::ImFont_IsLoaded(const cimgui::ImFont* self)
{
    return reinterpret_cast<const ::ImFont*>(self)->IsLoaded();
}

CIMGUI_API const char*  cimgui::ImFont_GetDebugName(const cimgui::ImFont* self)
{
    return reinterpret_cast<const ::ImFont*>(self)->GetDebugName();
}

CIMGUI_API cimgui::ImVec2 cimgui::ImFont_CalcTextSizeA(cimgui::ImFont* self, float size, float max_width, float wrap_width, const char* text_begin)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<::ImFont*>(self)->CalcTextSizeA(size, max_width, wrap_width, text_begin));
}

CIMGUI_API cimgui::ImVec2 cimgui::ImFont_CalcTextSizeAEx(cimgui::ImFont* self, float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<::ImFont*>(self)->CalcTextSizeA(size, max_width, wrap_width, text_begin, text_end, remaining));
}

CIMGUI_API const char*  cimgui::ImFont_CalcWordWrapPositionA(cimgui::ImFont* self, float scale, const char* text, const char* text_end, float wrap_width)
{
    return reinterpret_cast<::ImFont*>(self)->CalcWordWrapPositionA(scale, text, text_end, wrap_width);
}

CIMGUI_API void         cimgui::ImFont_RenderChar(cimgui::ImFont* self, cimgui::ImDrawList* draw_list, float size, cimgui::ImVec2 pos, ImU32 col, ImWchar c)
{
    reinterpret_cast<::ImFont*>(self)->RenderChar(reinterpret_cast<::ImDrawList*>(draw_list), size, ConvertToCPP_ImVec2(pos), col, c);
}

CIMGUI_API void         cimgui::ImFont_RenderText(cimgui::ImFont* self, cimgui::ImDrawList* draw_list, float size, cimgui::ImVec2 pos, ImU32 col, cimgui::ImVec4 clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip)
{
    reinterpret_cast<::ImFont*>(self)->RenderText(reinterpret_cast<::ImDrawList*>(draw_list), size, ConvertToCPP_ImVec2(pos), col, ConvertToCPP_ImVec4(clip_rect), text_begin, text_end, wrap_width, cpu_fine_clip);
}

CIMGUI_API void         cimgui::ImFont_BuildLookupTable(cimgui::ImFont* self)
{
    reinterpret_cast<::ImFont*>(self)->BuildLookupTable();
}

CIMGUI_API void         cimgui::ImFont_ClearOutputData(cimgui::ImFont* self)
{
    reinterpret_cast<::ImFont*>(self)->ClearOutputData();
}

CIMGUI_API void         cimgui::ImFont_GrowIndex(cimgui::ImFont* self, int new_size)
{
    reinterpret_cast<::ImFont*>(self)->GrowIndex(new_size);
}

CIMGUI_API void         cimgui::ImFont_AddGlyph(cimgui::ImFont* self, const cimgui::ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
{
    reinterpret_cast<::ImFont*>(self)->AddGlyph(reinterpret_cast<const ::ImFontConfig*>(src_cfg), c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
}

CIMGUI_API void         cimgui::ImFont_AddRemapChar(cimgui::ImFont* self, ImWchar dst, ImWchar src, bool overwrite_dst)
{
    reinterpret_cast<::ImFont*>(self)->AddRemapChar(dst, src, overwrite_dst);
}

CIMGUI_API bool         cimgui::ImFont_IsGlyphRangeUnused(cimgui::ImFont* self, unsigned int c_begin, unsigned int c_last)
{
    return reinterpret_cast<::ImFont*>(self)->IsGlyphRangeUnused(c_begin, c_last);
}

CIMGUI_API cimgui::ImVec2 cimgui::ImGuiViewport_GetCenter(const cimgui::ImGuiViewport* self)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<const ::ImGuiViewport*>(self)->GetCenter());
}

CIMGUI_API cimgui::ImVec2 cimgui::ImGuiViewport_GetWorkCenter(const cimgui::ImGuiViewport* self)
{
    return ConvertFromCPP_ImVec2(reinterpret_cast<const ::ImGuiViewport*>(self)->GetWorkCenter());
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

CIMGUI_API void   cimgui::ImageImVec4(ImTextureID user_texture_id, cimgui::ImVec2 image_size, cimgui::ImVec2 uv0, cimgui::ImVec2 uv1, cimgui::ImVec4 tint_col, cimgui::ImVec4 border_col)
{
    ::ImGui::Image(user_texture_id, ConvertToCPP_ImVec2(image_size), ConvertToCPP_ImVec2(uv0), ConvertToCPP_ImVec2(uv1), ConvertToCPP_ImVec4(tint_col), ConvertToCPP_ImVec4(border_col));
}

CIMGUI_API void   cimgui::PushButtonRepeat(bool repeat)
{
    ::ImGui::PushButtonRepeat(repeat);
}

CIMGUI_API void   cimgui::PopButtonRepeat(void)
{
    ::ImGui::PopButtonRepeat();
}

CIMGUI_API void   cimgui::PushTabStop(bool tab_stop)
{
    ::ImGui::PushTabStop(tab_stop);
}

CIMGUI_API void   cimgui::PopTabStop(void)
{
    ::ImGui::PopTabStop();
}

CIMGUI_API cimgui::ImVec2 cimgui::GetContentRegionMax(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetContentRegionMax());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetWindowContentRegionMin(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetWindowContentRegionMin());
}

CIMGUI_API cimgui::ImVec2 cimgui::GetWindowContentRegionMax(void)
{
    return ConvertFromCPP_ImVec2(::ImGui::GetWindowContentRegionMax());
}

CIMGUI_API bool   cimgui::BeginChildFrame(ImGuiID id, cimgui::ImVec2 size)
{
    return ::ImGui::BeginChildFrame(id, ConvertToCPP_ImVec2(size));
}

CIMGUI_API bool   cimgui::BeginChildFrameEx(ImGuiID id, cimgui::ImVec2 size, ImGuiWindowFlags window_flags)
{
    return ::ImGui::BeginChildFrame(id, ConvertToCPP_ImVec2(size), window_flags);
}

CIMGUI_API void   cimgui::EndChildFrame(void)
{
    ::ImGui::EndChildFrame();
}

CIMGUI_API void   cimgui::ShowStackToolWindow(bool* p_open)
{
    ::ImGui::ShowStackToolWindow(p_open);
}

CIMGUI_API bool   cimgui::ComboObsolete(const char* label, int* current_item, bool (*old_callback)(void* user_data, int idx, const char** out_text), void* user_data, int items_count)
{
    return ::ImGui::Combo(label, current_item, old_callback, user_data, items_count);
}

CIMGUI_API bool   cimgui::ComboObsoleteEx(const char* label, int* current_item, bool (*old_callback)(void* user_data, int idx, const char** out_text), void* user_data, int items_count, int popup_max_height_in_items)
{
    return ::ImGui::Combo(label, current_item, old_callback, user_data, items_count, popup_max_height_in_items);
}

CIMGUI_API bool   cimgui::ListBoxObsolete(const char* label, int* current_item, bool (*old_callback)(void* user_data, int idx, const char** out_text), void* user_data, int items_count)
{
    return ::ImGui::ListBox(label, current_item, old_callback, user_data, items_count);
}

CIMGUI_API bool   cimgui::ListBoxObsoleteEx(const char* label, int* current_item, bool (*old_callback)(void* user_data, int idx, const char** out_text), void* user_data, int items_count, int height_in_items)
{
    return ::ImGui::ListBox(label, current_item, old_callback, user_data, items_count, height_in_items);
}

CIMGUI_API void   cimgui::SetItemAllowOverlap(void)
{
    ::ImGui::SetItemAllowOverlap();
}

CIMGUI_API void   cimgui::PushAllowKeyboardFocus(bool tab_stop)
{
    ::ImGui::PushAllowKeyboardFocus(tab_stop);
}

CIMGUI_API void   cimgui::PopAllowKeyboardFocus(void)
{
    ::ImGui::PopAllowKeyboardFocus();
}

#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
#endif // #ifndef IMGUI_DISABLE
